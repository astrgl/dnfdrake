' Gambas class file

'Gambas class file
'VARIABILI DI SISTEMA********************************************************************************
Public $hProcess As Process
Public $sText As String
Public $STATUS As Integer
Public $MEMOCOMMAND As String
Public $MEMOEXEC As String
Public $INSTALL As String
Public $UNINSTALL As String
Public $UPDATE As String
Public $INSTALLNODEPS As String
Public $UNINSTALLNODEPS As String
Public $UPDATENODEPS As String
Public $PKGUPDATE As String
Public $DOWNGRADE As String
Public $REINSTALL As String
Public $CUSTOMCMD As String
Public $CHKERROR As Integer
Public $ListpkgWR As Integer
Public $ListpkgCK As Integer
Public $OFFLINE As Integer
Public $pathdir As String
Public $PATHLOG As String
Public $COLORTEXT As String
Public $NOTPACKAGES As String
Public $DNFDRAKEASK As String
Public $RPMPATH As String
Public $LOG As String
Public $VERBOSE As String
Public $PRINTLOG As Integer
Public $DATATIME As String
Public $SECUREMODE As String
Public $FRUNMAIN As Integer
Public $FRUNPW As Integer
Public $INFOENABLED As Integer
Public $INFOTEXT As String
Public $HBOX1TOOLTIP As String
Public $CASE As Integer
Public $LANG As String
Public $templang As String
Public $EXCLUDE As String
Public $AUTOREMOVETEXT As String
Public $CMBTOOLTIP As String
Public $RISOLUZIONE As String
Public $RISOLUZIONEX As Integer
Public $RISOLUZIONEY As Integer
Public $KILL As Integer
Public $SUSPENDONTTP As String
Public $SUSPENDOFFTTP As String
Public $WAITSUSPEND As Integer
Public $ABORT As Integer
'Public $COUNTRECOVERSUSPEND As Integer ' RIMOSSO IL RIPRISTINO DEL SUSPEND ORA AVVIENE SOLO ALLA CHIUSURA DI DNFDRAKE
Public $AUTOSUSPEND As Integer
Public $CLEARLOGSUSPEND As Integer 
Public $PROGRESSBARFORCESUSPEND As Integer 
Public $COUNTBTNCLOSE As Integer
Public $CLOSEPASS As Integer
Public $SI As String
Public $NO As String
Public $ASKEXIT As String
Public $FLATDRAKESEARCH As String
Public $CLEARLOG As Integer
Public $CLEARTXTPKG As Integer
Public $THEMES As String            'TEMA DELLE ICONE
Public $THEMESSUFFIX As String      'CODA DEL NOME DELL'ICONA
Public $PATHICONS As String         'PATH DELLE ICONE
Public $TEMAASK As String           'TRADUZIONE DOMANDA TEMA
Public $DISTRO As String            'VERIFICA DISTRO IN ESECUZIONE
'VARIABILI EXTRA OPTIONS*****************************************************************************
Public $SEARCH As String
'PAROLE CHIAVE LETTURA STRINGA E MESSAGGI************************************************************
Public $PASSWORD As String
Public $RQSTPASSWORD As String
Public $PROCEDERE As String
'Public $RIMOSSI As String
Public $FATTO As String
Public $NONRIUSCITO As String
Public $DIALOGDIRTITLE As String
Public $DIALOGFILETITLE As String
Public $SELECTPKG As String
Public $CERCAFILE As String
Public $TXTRUN As String
Public $MSGAVVIOMULTIPLO As String
Public $MSGUPDATESASK As String
Public $MSGTRAYREMOVE As String
Public $OK As String
Public $NODEPSINFO As String
Public $EASYPASSWORD As Integer      'FUNZIONE CHE CONSENTE DI INSERIRE LA PASSWORD SOLO UNA VOLTA CON VALORE 1 È ATTIVA 
Public $MEMOPW As String             'VARIABILE DOVE VIENE MEMORIZZATA LA PASSWORD PER TUTTA LA SESSIONE

Public Sub Form_Open()
'COMANDI
 Dim flCMD As File 
 Dim jCMD As Byte 
 Dim s$CMD As String
 Dim ss$CMD As New String[]
'pulsanti
 Dim flBTN As File  
 Dim jBTN As Byte
 Dim s$BTN As String
 Dim ss$BTN As New String[]
'parole chiave
 Dim flKEY As File  
 Dim jKEY As Byte
 Dim s$KEY As String
 Dim ss$KEY As New String[]
'testi e tooltip
 Dim flTTP As File  
 Dim jTTP As Byte
 Dim s$TTP As String
 Dim ss$TTP As New String[]
'combox tipo pacchetto installato non installato ecc.
 Dim flCMBT As File  
 Dim jCMBT As Byte
 Dim s$CMBT As String
 Dim ss$CMBT As New String[] 
'combox tipo info.
 Dim flCMBI As File  
 Dim jCMBI As Byte
 Dim s$CMBI As String
 Dim ss$CMBI As New String[] 
 'CONTROLLO DISTROSYNC
 Dim flDSTSYNC As File  
 Dim jDSTSYNC As Byte
 Dim s$DSTSYNC As String
 Dim ss$DSTSYNC As New String[] 
 
'IMPOSTA LA DIMENSIONE DELLA FINESTRA IN BASE ALLA RISOLUZIONE DELLO SCHERMO
  Shell "xrandr --current |grep '*'" To $RISOLUZIONE
  $RISOLUZIONEX = Val(Str(Right(Left($risoluzione, 7), 4)))
  $RISOLUZIONEY = Val(Str(Right(Left($risoluzione, 12), 4)))
  RESOLUTION
  
'VERIFICA SU QUALE SISTEMA È IN ESECUZIONE 
  'Dim $DISTRO As String
  
'**********************************************************************************
 'SERVE PER CHIUDERE TUTTE LE FINESTRE DEL PROGRAMMA APERTE ALL'USCITA**************
 
 Application.MainWindow = Me
 
 'Avvio il processo*****************************************************************
 
 $hProcess = Exec ["sh", "--noediting"] For Input Output As "Process"
  
'**********************************************************************************
 
 'controllo esistenza delle directory del programma***************************************************
   If Not Exist(User.Home &/ ".config/dnfdrake/") Then
      Mkdir User.Home &/ "/.config/dnfdrake/"
   Endif
   If Not Exist(User.Home &/ ".config/dnfdrake/log") Then
      Mkdir User.Home &/ "/.config/dnfdrake/log"
   Endif
   If Not Exist(User.Home &/ ".config/dnfdrake/tmp") Then
      Mkdir User.Home &/ "/.config/dnfdrake/tmp"
   Endif
 '***********************************************************************************************
  
'lettura della lingua di sistema e gestione test nuove lingue************************
'SE SI STA TESTANDO UNA LINGUA ESEGUE QUESTO*****************************************
 If txtlang.Text = "**"
       txtlang.Text = Right($LANG, 2)
       Print #$hProcess, "LANG=" & $templang & ".UTF-8" & gb.NewLine;
       Wait 0.1
       Print #$hProcess, "LANGUAGE=" & $templang & ".UTF-8" & gb.NewLine;
       Wait 0.1
       Print #$hProcess, "LC_COLLATE=C" & gb.NewLine;
       Wait 0.1
       Print #$hProcess, "LC_CTYPE=" & $templang & ".UTF-8" & gb.NewLine;
       Wait 0.5
       txtConsole.Text = ""   
 Else    
 ' SE NON CI SONO LINGUE IN TEST CARICA LA LINGUA DI SISTEMA DA USARE****************
    txtlang.Text = Left(Right(System.Language, -3), 2)
    $LANG = Left(System.Language, 5)
 Endif   
'SERVE PER TESTARE ALTRE LINGUE - SOSTITUITO DA MACIGLANG E RELOADLANG++++++++++++++++

  'txtlang.Text = "CA" 
  '$lang = "es_CA"


'MODIFICA LINGUA++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
' 
  If $LANG = "it_IT" Or $LANG = "fr_FR" Or $LANG = "en_US" Or $LANG = "pl_PL" Or $LANG = "en_GB" Or $LANG = "br_BR" Or $LANG = "es_ES" Or $LANG = "de_DE" Or $LANG = "ca_ES" Or $LANG = $templang 'AGGIUNGERE |Or $LANG = "xx_XX"| PER TESTARE ALTRE LINGUE++++++++++++++++++++++++++++++++++++++++++++++++++++++

'SERVE PER TESTARE ALTRE LINGUE - SOSTITUITO DA MACIGLANG E RELOADLANG+++++++++++++++
        
        ' Print #$hProcess, "LANG=es_CA.UTF-8" & gb.NewLine;
        ' Wait 0.1
        ' Print #$hProcess, "LANGUAGE=es_CA.UTF-8" & gb.NewLine;
        ' Wait 0.1
        ' Print #$hProcess, "LC_COLLATE=C" & gb.NewLine;
        ' Wait 0.1
        ' Print #$hProcess, "LC_CTYPE=es_CA.UTF-8" & gb.NewLine;
'++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
     Else
        txtlang.Text = "US" 
        $LANG = "en_US"
        Print #$hProcess, "LANG=en_US.UTF-8" & gb.NewLine;
        Wait 0.1
        Print #$hProcess, "LANGUAGE=en_US.UTF-8" & gb.NewLine;
        Wait 0.1
        Print #$hProcess, "LC_COLLATE=C" & gb.NewLine;
        Wait 0.1
        Print #$hProcess, "LC_CTYPE=en_US.UTF-8" & gb.NewLine;
        Message.Info("Your language is unavailable.The interface will change to fallback EN-US", "OK")
   
      Endif
'+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++    

'VERIFICA SE IMPOSTATO AGGIORNAMENTO ROCK O ROLLING******************
    'CONTROLLO PRESENZA ABILITAZIONE VECCHIO DISTROSYNC E CORREZIONE IN NUOVO FORMARTO  
      If Exist(User.Home &/ ".config/dnfdrake/distrosync") Then
         Shell "cat " & User.Home &/ ".config/dnfdrake/distrosync" To $DISTRO 
           ' Sleep 0.1   
           If $DISTRO = ""
              Shell "echo 1 > " & User.Home &/ ".config/dnfdrake/distrosync" Wait
           Endif 
      Endif 
      
    ' IMPOSTA IL DISTROSYNC DI DEFAULT SE SI USA ROME o COCKER DI OMA***********************
   If Not Exist(User.Home &/ ".config/dnfdrake/distrosync") Then 
   Shell "lsb_release -c" To $DISTRO
    If InStr($DISTRO, "ROME", 0, gb.IgnoreCase) Or If InStr($DISTRO, "Nickel", 0, gb.IgnoreCase) Then
        Shell "echo 1 > " & User.Home &/ ".config/dnfdrake/distrosync" Wait
      Else 
        Shell "echo 0 > " & User.Home &/ ".config/dnfdrake/distrosync" Wait 
      Endif  
    Endif
   '  
  'VERIFICA QUALE TIPO DI AGGIORNAMENTO USARE
  
   flDSTSYNC = Open User.Home &/ ".config/dnfdrake/distrosync" For Read   ' ...oppure "Input"
   While Not Eof(flDSTSYNC)
    Input #flDSTSYNC, s$DSTSYNC
    ss$DSTSYNC.Add(s$DSTSYNC)
   Wend 
   Close #flDSTSYNC
   For jDSTSYNC = 0 To ss$DSTSYNC.Max
      If ss$DSTSYNC[0] = "1" 
        BTNDISTUPDATE.Visible = True
        PICBTNDISTUPDATE.Visible = True
      Else  
        BTNDISTUPDATE.Visible = False
        PICBTNDISTUPDATE.Visible = False
      Endif
   Next 
   flDSTSYNC.Close      
   
' 'VECCHIA VERFIFICA BASATA SULLA SOLA PRESENZA DEL FILE
' If Exist(User.Home &/ ".config/dnfdrake/distrosync") Then
'   BTNDISTUPDATE.Visible = True
'   PICBTNDISTUPDATE.Visible = True
' Else  
'   BTNDISTUPDATE.Visible = False
'   PICBTNDISTUPDATE.Visible = False
'   Endif



'VERIFICA SE È STATA BLOCCATA LA SOSPENSIONE IN UNA SESSIONE PRECEDENTE*********************************
VERIFYSUSPEND  

'CARICA I COMANDI*******************************************************

If Not Exist(User.Home &/ ".config/dnfdrake/dnfdrake-COMMAND") Then
flCMD = Open "/usr/share/dnfdrake/dnfdrake-COMMAND" For Read 
Else  
  flCMD = Open User.Home &/ ".config/dnfdrake/dnfdrake-COMMAND" For Read
  Endif
 While Not Eof(flCMD)
   Input #flCMD, s$CMD
' ' Poiché "Input" legge le stringhe in un File di testo fino all'interruzione dello spazio o al carattere di "nuova linea",
' ' ogni parola del testo, delimitata da uno spazio, viene individuata e caricata in un nuovo elemento della variabile-array ss$:
   ss$CMD.Add(s$CMD)
  Wend
'  
   Close #flCMD
' 
' ' Scrive i nomi dei pulsanti nella lingua di sistema usando ogni stringa contenuta in ciascun elemento della variabile-array ss$:
  For jCMD = 0 To ss$CMD.Max


      $INSTALL = Replace(ss$CMD[0], "_", " ")
      $UNINSTALL = Replace(ss$CMD[1], "_", " ")
      $UPDATE = Replace(ss$CMD[2], "_", " ")
      
  ' GESTIONE ERRORE DA ELIMINARE TRA 10 VERSIONI (1.10.1)
      Try $PKGUPDATE = Replace(ss$CMD[3], "_", " ")
      If Error Then 
      If Exist(User.Home &/ ".config/dnfdrake/dnfdrake-COMMAND")
      Shell "rm -f " & User.Home &/ ".config/dnfdrake/dnfdrake-COMMAND"
      Message.Delete("The default configuration had to be restored. Please restart DnfDrake!", "OK")
      Endif 
      Endif
      
      Try $DOWNGRADE = Replace(ss$CMD[4], "_", " ")
      If Error Then 
      If Exist(User.Home &/ ".config/dnfdrake/dnfdrake-COMMAND")
      Shell "rm -f " & User.Home &/ ".config/dnfdrake/dnfdrake-COMMAND"
      Message.Delete("The default configuration had to be restored. Please restart DnfDrake!", "OK")
      Endif 
      Endif      
      
      Try $CUSTOMCMD = Replace(ss$CMD[5], "_", " ")
      If Error Then
      If Exist(User.Home &/ ".config/dnfdrake/dnfdrake-COMMAND") 
      Shell "rm -f " & User.Home &/ ".config/dnfdrake/dnfdrake-COMMAND"
      Message.Delete("The default configuration had to be restored. Please restart DnfDrake!", "OK")
      Endif 
      Endif
      
      Try $COLORTEXT = Replace(ss$CMD[6], "_", " ")
      If Error Then
      If Exist(User.Home &/ ".config/dnfdrake/dnfdrake-COMMAND") 
      Shell "rm -f " & User.Home &/ ".config/dnfdrake/dnfdrake-COMMAND"
      Message.Delete("The default configuration had to be restored. Please restart DnfDrake!", "OK")
      Endif 
      Endif
      
      Try $REINSTALL = Replace(ss$CMD[7], "_", " ")
      If Error Then
      If Exist(User.Home &/ ".config/dnfdrake/dnfdrake-COMMAND")  
      Shell "rm -f " & User.Home &/ ".config/dnfdrake/dnfdrake-COMMAND"
      Message.Delete("The default configuration had to be restored. Please restart DnfDrake!", "OK")
      Endif
      Endif 

      Try $LOG = Replace(ss$CMD[8], "_", " ")
      If Error Then
      If Exist(User.Home &/ ".config/dnfdrake/dnfdrake-COMMAND")  
      Shell "rm -f " & User.Home &/ ".config/dnfdrake/dnfdrake-COMMAND"
      Message.Delete("The default configuration had to be restored. Please restart DnfDrake!", "OK")
      Endif
      Endif 
      
      Try $CLEARLOG = Replace(ss$CMD[10], "_", " ")
      If Error Then
      If Exist(User.Home &/ ".config/dnfdrake/dnfdrake-COMMAND")  
      Shell "rm -f " & User.Home &/ ".config/dnfdrake/dnfdrake-COMMAND"
      Message.Delete("The default configuration had to be restored. Please restart DnfDrake!", "OK")
      Endif
      Endif 
      
      Try $SECUREMODE = Replace(ss$CMD[9], "_", " ")
      If Error Then
      If Exist(User.Home &/ ".config/dnfdrake/dnfdrake-COMMAND")  
      Shell "rm -f " & User.Home &/ ".config/dnfdrake/dnfdrake-COMMAND"
      Message.Delete("The default configuration had to be restored. Please restart DnfDrake!", "OK")
      Endif
      Endif 

  '****************************************************
      Next
'  
   flCMD.Close      

'Carica i file linguistici*****************************************************************************

'PULSANTI***********************************************************
  
 flBTN = Open "/usr/share/dnfdrake/dnfdrake-BTN-" & $LANG For Read   ' ...oppure "Input"
  
  
 While Not Eof(flBTN)
   Input #flBTN, s$BTN
' ' Poiché "Input" legge le stringhe in un File di testo fino all'interruzione dello spazio o al carattere di "nuova linea",
' ' ogni parola del testo, delimitata da uno spazio, viene individuata e caricata in un nuovo elemento della variabile-array ss$:
   ss$BTN.Add(s$BTN)
  Wend
'  
   Close #flBTN
' 
' ' Scrive i nomi dei pulsanti nella lingua di sistema usando ogni stringa contenuta in ciascun elemento della variabile-array ss$:
  For jBTN = 0 To ss$BTN.Max


      btninstall.Text = Replace(ss$BTN[0], "_", " ")
      btnremove.Text = Replace(ss$BTN[1], "_", " ")
      btnupdate.Text = Replace(ss$BTN[2], "_", " ")
      Btndownload.Text = Replace(ss$BTN[3], "_", " ")
      btninfo.Text = Replace(ss$BTN[4], "_", " ")
      Btnclose.Text = Replace(ss$BTN[5], "_", " ")
      btncerca.Text = Replace(ss$BTN[6], "_", " ")
      $OK = Replace(ss$BTN[15], "_", " ")
'CORREZIONE PER FIX RELOADLANG************************************      
      If txtCommand.Visible = False Then
         Btncommand.Text = Replace(ss$BTN[7], "_", " ")  
      Else 
         Btncommand.Text = Replace(ss$BTN[7], "_", " ") & " ^"
      Endif
'*****************************************************************      
      Btncrono.Text = Replace(ss$BTN[8], "_", " ")
      Btnclear.Text = Replace(ss$BTN[9], "_", " ")
      btnstop.Text = Replace(ss$BTN[10], "_", " ")
      BtnCFG.Text = Replace(ss$BTN[11], "_", " ")
      BTNABOUT.text = Replace(ss$BTN[12], "_", " ")
      btnpkg.Text = Replace(ss$BTN[13], "_", " ")
      $SI = Replace(ss$BTN[16], "_", " ")
      $NO = Replace(ss$BTN[17], "_", " ")
      BTNPICKER.Text = Replace(ss$BTN[18], "_", " ")
      BTNPKGUPDATE.Text = Replace(ss$BTN[19], "_", " ")
      BTNDOWNDGRADE.Text = Replace(ss$BTN[20], "_", " ")
      BTNEXTRA.Text = Replace(ss$BTN[21], "_", " ")
      BTNVERSLOCK.Text = Replace(ss$BTN[22], "_", " ")
      BTNREINSTALL.Text = Replace(ss$BTN[23], "_", " ")
      Next
'  
   flBTN.Close      
' 'TEMA DELLE ICONE**************************************************************      
'   If Not Exist(User.Home &/ "/.config/dnfdrake/themes") Then 
'      Dim iTEMA As Integer = Message.Question("What theme do you want to use?", "Oxygen", "Breeze", "Breeze Dark")
'       If (iTEMA = 1) Then
'          File.Save(User.Home &/ "/.config/dnfdrake/themes", "Oxygen")
'       Else If (iTEMA = 2)
'          File.Save(User.Home &/ "/.config/dnfdrake/themes", "Breeze")
'       Else If (iTEMA = 3)
'          File.Save(User.Home &/ "/.config/dnfdrake/themes", "BreezeDark")   
'       Endif 
'   Endif
'   $THEMES = File.Load(User.Home &/ "/.config/dnfdrake/themes")
'   $THEMES = Replace($THEMES, " ", "")
'   If $THEMES = "Oxygen" Then
'      $THEMESSUFFIX = ".png"
'   Else If $THEMES = "Breeze"
'      $THEMESSUFFIX = "-B.svg"
'   Else If $THEMES = "BreezeDark"
'      $THEMESSUFFIX = "-BD.svg"    
'   Endif
'   If Exist("/usr/share/dnfdrake/icons") Then
'        $PATHICONS = "/usr/share/dnfdrake/icons/"
'   Else   
'        $PATHICONS = "/usr/share/dnfdrake/"       
'   Endif
'   LOADICONS
'PAROLE CHIAVE*******************************************************************
 
  flKEY = Open "/usr/share/dnfdrake/dnfdrake-KEY-" & $LANG For Read   ' ...oppure "Input"
  
  
 While Not Eof(flKEY)
   Input #flKEY, s$KEY
' ' Poiché "Input" legge le stringhe in un File di testo fino all'interruzione dello spazio o al carattere di "nuova linea",
' ' ogni parola del testo, delimitata da uno spazio, viene individuata e caricata in un nuovo elemento della variabile-array ss$:
   ss$KEY.Add(s$KEY)
  Wend
'  
   Close #flKEY
' 
' ' Scrive i nomi dei pulsanti nella lingua di sistema usando ogni stringa contenuta in ciascun elemento della variabile-array ss$:
  For jKEY = 0 To ss$KEY.Max

'richiesta password
      $PASSWORD = ss$KEY[0] 
      $PASSWORD = Replace($PASSWORD, "_", " ")
'operazione annullata se è richiesta password
      $RQSTPASSWORD = ss$KEY[1]
      $RQSTPASSWORD = Replace($RQSTPASSWORD, "_", " ")
'PROCEDERE AD INSTALLARE
      $PROCEDERE = ss$KEY[2]
      $PROCEDERE = Replace($PROCEDERE, "_", " ") 
' USATO DA DNFDRAKETRAY  ss$KEY[3]

' OPERAZIONE TERMINATA (FATTO)
      $FATTO = ss$KEY[4]
      $FATTO = Replace($FATTO, "_", " ")
' OPERAZIONE TERMINATA NON RIUSCITA (NON RIUSCITA)
      $NONRIUSCITO = ss$KEY[7]
      $NONRIUSCITO = Replace($NONRIUSCITO, "_", " ")      

       Next
  flKEY.Close
   
   'COMBOTIPO************************************************************************
  flCMBT = Open "/usr/share/dnfdrake/dnfdrake-CMBT-" & $LANG For Read   ' ...oppure "Input"

 While Not Eof(flCMBT)
   Input #flCMBT, s$CMBT
' ' Poiché "Input" legge le stringhe in un File di testo fino all'interruzione dello spazio o al carattere di "nuova linea",
' ' ogni parola del testo, delimitata da uno spazio, viene individuata e caricata in un nuovo elemento della variabile-array ss$:
   ss$CMBT.Add(s$CMBT)
  Wend
   Close #flCMBT
' ' Scrive i nomi dei pulsanti nella lingua di sistema usando ogni stringa contenuta in ciascun elemento della variabile-array ss$:
  For jCMBT = 3 To ss$CMBT.Max

      Cmbtipo.Add(Replace(ss$CMBT[0], "_", " "))
      Cmbtipo.Add(Replace(ss$CMBT[1], "_", " "))
      Cmbtipo.Add(Replace(ss$CMBT[2], "_", " "))
      Cmbtipo.Add(Replace(ss$CMBT[3], "_", " "))
      Cmbtipo.Add("Autoremove")
      BTNTABINSTALLED.Text = (Replace(ss$CMBT[1], "_", " "))
      BTNTABAVIABLE.Text = (Replace(ss$CMBT[2], "_", " "))
      BTNTABUPDATE.Text = (Replace(ss$CMBT[3], "_", " "))
       Next
'  
   flCMBT.Close
 '*********************************************************************************
 
'TITOLI E TOOTIP*******************************************************************
 

  flTTP = Open "/usr/share/dnfdrake/dnfdrake-TTP-" & $LANG For Read   ' ...oppure "Input"
  
  
 While Not Eof(flTTP)
   Input #flTTP, s$TTP
' ' Poiché "Input" legge le stringhe in un File di testo fino all'interruzione dello spazio o al carattere di "nuova linea",
' ' ogni parola del testo, delimitata da uno spazio, viene individuata e caricata in un nuovo elemento della variabile-array ss$:
   ss$TTP.Add(s$TTP)
  Wend
'  
   Close #flTTP
' 
' ' Scrive i nomi dei pulsanti nella lingua di sistema usando ogni stringa contenuta in ciascun elemento della variabile-array ss$:
  For jTTP = 0 To ss$TTP.Max

      txtpkg.Tooltip = Replace(ss$TTP[0], "_", " ")
      Btnpathfile.Tooltip = Replace(ss$TTP[1], "_", " ")
      btninstall.Tooltip = Replace(ss$TTP[2], "_", " ")
      btnremove.Tooltip = Replace(ss$TTP[3], "_", " ")
      Btnclose.Tooltip = Replace(ss$TTP[4], "_", " ")
      Cmbtipo.Tooltip = Replace(ss$TTP[5], "_", " ")
      btncerca.Tooltip = Replace(ss$TTP[6], "_", " ")
      BtnCFG.Tooltip = Replace(ss$TTP[7], "_", " ")
      Btndownload.Tooltip = Replace(ss$TTP[8], "_", " ")
      btnupdate.Tooltip = Replace(ss$TTP[9], "_", " ")
      Cmbtipoinfo.Tooltip = Replace(ss$TTP[10], "_", " ")
      btninfo.Tooltip = Replace(ss$TTP[11], "_", " ")
      Btncrono.Tooltip = Replace(ss$TTP[12], "_", " ")
      btnstop.Tooltip = Replace(ss$TTP[13], "_", " ")
      Btnclear.Tooltip = Replace(ss$TTP[14], "_", " ")
      btnpkg.Tooltip = Replace(ss$TTP[15], "_", " ") 
      Btncommand.Tooltip = Replace(ss$TTP[16], "_", " ")
      $HBOX1TOOLTIP = Replace(ss$TTP[17], "_", " ")
      Listpkg.Tooltip = Replace(ss$TTP[18], "_", " ")
      txtConsole.Tooltip = Replace(ss$TTP[19], "_", " ")
      txtlang.Tooltip = Replace(ss$TTP[20], "_", " ")
      Btncleartxtpkg.Tooltip = Replace(ss$TTP[24], "_", " ")
      $DIALOGDIRTITLE = Replace(ss$TTP[25], "_", " ")
      $DIALOGFILETITLE = Replace(ss$TTP[26], "_", " ")
      $SELECTPKG = Replace(ss$TTP[27], "_", " ")  
      BTNPICKER.Tooltip = Replace(ss$TTP[28], "_", " ")
      $CERCAFILE = Replace(ss$TTP[29], "_", " ")
      BTNDOWNDGRADE.Tooltip = Replace(ss$TTP[30], "_", " ") 
      BTNCUSTOM.Tooltip = Replace(ss$TTP[31], "_", " ") 
      BTNPKGUPDATE.Tooltip = Replace(ss$TTP[32], "_", " ") 
      BTNEXTRA.Tooltip = Replace(ss$TTP[37], "_", " ") 
      PCTCONNECT.Tooltip = Replace(ss$TTP[38], "_", " ")
      PCTDISCONNECT.Tooltip = Replace(ss$TTP[39], "_", " ")
      BTNSELECTALL.Tooltip = Replace(ss$TTP[40], "_", " ")
      BTNUNSELECTALL.Tooltip = Replace(ss$TTP[41], "_", " ")
      BTNTABINSTALLED.Tooltip = Replace(ss$TTP[42], "_", " ") 
      BTNTABAVIABLE.Tooltip = Replace(ss$TTP[43], "_", " ") 
      BTNTABUPDATE.Tooltip = Replace(ss$TTP[44], "_", " ") 
      $NOTPACKAGES = Replace(ss$TTP[48], "_", " ") 
      $DNFDRAKEASK = Replace(ss$TTP[49], "_", " ")
      BTNDNFCLEAN.Tooltip = Replace(ss$TTP[51], "_", " ") 
      Btnpathpkglist.Tooltip = Replace(ss$TTP[52], "_", " ") 
      ListpkgINSTALLATI.Tooltip = Replace(ss$TTP[53], "_", " ")
      ListpkgAVAILABLE.Tooltip = Replace(ss$TTP[53], "_", " ")  
      ListpkgUPGRADE.Tooltip = Replace(ss$TTP[53], "_", " ") 
      BTNADDPKGLIST.Tooltip = Replace(ss$TTP[54], "_", " ") 
      BTNPKGLISTVIEW.Tooltip = Replace(ss$TTP[58], "_", " ") 
      BTNPKGLISTCLEAN.Tooltip = Replace(ss$TTP[59], "_", " ") 
      BTNEXCLUDE.Tooltip = Replace(ss$TTP[60], "_", " ") 
      BTNAUTOREMOVE.Tooltip = Replace(ss$TTP[76], "_", " ") 
      $AUTOREMOVETEXT = Replace(ss$TTP[77], "_", " ") 
      $CMBTOOLTIP = Replace(ss$TTP[5], "_", " ")
      BTNFULLSCREEN.Tooltip = Replace(ss$TTP[78], "_", " ") 
      BTNRESIZE.Tooltip = Replace(ss$TTP[79], "_", " ") 
      $SUSPENDONTTP = Replace(ss$TTP[81], "_", " ") 
      $SUSPENDOFFTTP = Replace(ss$TTP[82], "_", " ") 
      BTNMYREPO.Tooltip = Replace(ss$TTP[83], "_", " ")
      $ASKEXIT = Replace(ss$TTP[85], "_", " ")
      $MSGAVVIOMULTIPLO = Replace(ss$TTP[86], "_", " ")
      $MSGUPDATESASK = Replace(ss$TTP[87], "_", " ")
      $MSGTRAYREMOVE = Replace(ss$TTP[88], "_", " ")
      CHKNODEPS.Tooltip = Replace(ss$TTP[92], "_", " ")
      $NODEPSINFO = Replace(ss$TTP[93], "_", " ")   
      LBLTXTSELECTION.Text = Replace(ss$TTP[94], "_", " ")
      $TEMAASK = Replace(ss$TTP[95], "_", " ")
     Next
'  
   flTTP.Close
'TEMA DELLE ICONE**************************************************************      
  If Not Exist(User.Home &/ "/.config/dnfdrake/themes") Then 
     Dim iTEMA As Integer = Message.Question($TEMAASK, "Oxygen", "Breeze", "Breeze Dark")
      If (iTEMA = 1) Then
         File.Save(User.Home &/ "/.config/dnfdrake/themes", "Oxygen")
      Else If (iTEMA = 2)
         File.Save(User.Home &/ "/.config/dnfdrake/themes", "Breeze")
      Else If (iTEMA = 3)
         File.Save(User.Home &/ "/.config/dnfdrake/themes", "BreezeDark")   
      Endif 
  Endif
  $THEMES = File.Load(User.Home &/ "/.config/dnfdrake/themes")
  $THEMES = Replace($THEMES, " ", "")
  If $THEMES = "Oxygen" Then
     $THEMESSUFFIX = ".png"
  Else If $THEMES = "Breeze"
     $THEMESSUFFIX = "-B.svg"
  Else If $THEMES = "BreezeDark"
     $THEMESSUFFIX = "-BD.svg"    
  Endif
  If Exist("/usr/share/dnfdrake/icons") Then
       $PATHICONS = "/usr/share/dnfdrake/icons/"
  Else   
       $PATHICONS = "/usr/share/dnfdrake/"       
  Endif
  LOADICONS
  'COMBOINFO************************************************************************
  flCMBI = Open "/usr/share/dnfdrake/dnfdrake-CMBI-" & $LANG For Read   ' ...oppure "Input"
 While Not Eof(flCMBI)
   Input #flCMBI, s$CMBI
' ' Poiché "Input" legge le stringhe in un File di testo fino all'interruzione dello spazio o al carattere di "nuova linea",
' ' ogni parola del testo, delimitata da uno spazio, viene individuata e caricata in un nuovo elemento della variabile-array ss$:
   ss$CMBI.Add(s$CMBI)
  Wend
   Close #flCMBI
' ' Scrive i nomi dei pulsanti nella lingua di sistema usando ogni stringa contenuta in ciascun elemento della variabile-array ss$:
  For jCMBI = 5 To ss$CMBI.Max
      Cmbtipoinfo.Add(Replace(ss$CMBI[0], "_", " "))
      Cmbtipoinfo.Add(Replace(ss$CMBI[1], "_", " "))
      Cmbtipoinfo.Add(Replace(ss$CMBI[2], "_", " "))
      Cmbtipoinfo.Add(Replace(ss$CMBI[3], "_", " "))
      Cmbtipoinfo.Add(Replace(ss$CMBI[4], "_", " "))
      Cmbtipoinfo.Add(Replace(ss$CMBI[5], "_", " "))
       Next
   flCMBI.Close
   
'  'ASSEGNAZIONE TOOLTIP AI PULSANTE TAB PKG
' 
' BTNTABINSTALLED.Tooltip = Cmbtipo[1].Text
' BTNTABAVIABLE.Tooltip = Cmbtipo[2].Text
' BTNTABUPDATE.Tooltip = Cmbtipo[3].Text
'VERIFICA CHE DNFDRAKE NON SIA GIA IN ESECUZIONE
 Dim $LOCK As String
 Dim $LOCKVAL As Integer
  Shell "ps aux | grep gbr3 | grep -w dnfdrake.gambas | wc -l" Wait To $LOCK 
  $LOCKVAL = CInteger(Val(Right(Left($LOCK))))
  If $LOCKVAL > 2 Then
  Message.Info($MSGAVVIOMULTIPLO, "OK")
    Quit 
  Endif 

'Azzera le variabili***************************************************************************
   $ListpkgWR = 0
   $ListpkgCK = 0
   $CHKERROR = 0
   Cmbtipo.Index = 0
   Cmbtipoinfo.Index = 0
   CMBVERSLOCK.index = 0
   $OFFLINE = 1
   PCTDISCONNECT.Visible = True
   PCTCONNECT.Visible = False
   txtCommand.SetFocus
   $pathdir = User.home & "/"
   $PATHLOG = User.Home & "/.config/dnfdrake/log"
   $PRINTLOG = 0
   $INFOENABLED = 0
   $KILL = 0
   $CLOSEPASS = 0
   TXTINFOBOX.Text = "Loading..."
   $CLEARTXTPKG = 0
   $MEMOPW = "NOPW"
   
'PULISCE LE LISTE PROVVISORIE DI INSTALLAZIONE/RIMOZIONE
  TMPLISTCLEAN
'Carica il pront**********************************************************************************

 Print #$hProcess, "PS1=" & Chr$(34) & $DNFDRAKEASK & Chr$(34) & gb.NewLine;
 
'Scrive il path in $RPMPATH se dnfdrake avviato con doppio click su rpm***************************

 $RPMPATH = Replace$(Application.Args[1], " ", Chr$(92) & " ")
 
'Controlla se sono presenti pacchetti esclusi dagli aggiornamenti*********************************
  EXCLUDETEST
    
'Crea le liste*************************************************************************************
    If $OFFLINE = 1 Then
       TimerUPLISTE.Enabled = True
    Endif 

' ABILITAZIONE / DISABILITAZIONE NODO VERBOSE
$VERBOSE = " | tee /dev/null " & User.Home & "/.config/dnfdrake/log/last.log"

' ABILITAZIONE TASTO LOG 
  If $LOG = "LOG" Then
    BTNVIEWLOG.Visible = True
  Else 
    BTNVIEWLOG.Visible = False
  Endif
'FUNZIONE DA MODIFICARE PER RENDERE IGNORECASE ATTIVO DI DEFAULT**************************  
  'VERIFICA SE IMPOSTATO IGNORE CASE E GESTISCE ATTIVAZIONE DI DEFAULT DELLA FUNZIONE  ***
  If Exist(User.Home &/ ".config/dnfdrake/ignorecase") Then
    If File.Load(User.Home &/ ".config/dnfdrake/ignorecase") = "" Then
       'Message.Info("VUOTO", "ok")
       File.Save(User.Home &/ "/.config/dnfdrake/ignorecase", "1") 
    Endif
  Else
    File.Save(User.Home &/ "/.config/dnfdrake/ignorecase", "1")  
  Endif
  
  If File.Load(User.Home &/ ".config/dnfdrake/ignorecase") = "1" Then
     $CASE = 1
     'Message.Info("1", "ok")
  Else  
     $CASE = 0 
     'Message.Info("no 1", "ok")
  Endif  
  'MOSTRA IL PULSANTE OM-PICKER IN OMA*******************
    Shell "lsb_release -d" To $DISTRO
    If InStr($DISTRO, "OpenMandriva", 0, gb.IgnoreCase) Then
      BTNPICKER.Visible = True
      Else 
      BTNPICKER.Visible = False
    Endif
  'CARICA L'IMMAGINE DI PICLOGODISTRO
  LOADLOGO
  'VERIFICA SE IL SUSPEND È ABILITATO E ALTRE FUNZIONI*********
  VERIFYSUSPEND
  $WAITSUSPEND = 0
  $ABORT = 0
  $CLEARLOGSUSPEND = 1 
  $PROGRESSBARFORCESUSPEND = 0 
  $COUNTBTNCLOSE = 0
  'ABILITA AUTOSUSPEND****************************************
  If Exist(User.Home &/ ".config/dnfdrake/autosuspend") Then
    $AUTOSUSPEND = 1
  Else  
    $AUTOSUSPEND = 0
  Endif  
  'ABILITA EASYPASSWORD
  If Exist(User.Home &/ ".config/dnfdrake/easypassword") Then
    $EASYPASSWORD = 1
  Else  
    $EASYPASSWORD = 0
  Endif  
  
  'VERIFICA SE DNFDRAKE È LANCIATO DAL FLATDRAKE E ADATTA LA RICERCA******* IN TEST**************
   If Exist(User.Home &/ ".config/flatdrake/flatsearchtmp") Then
      TimerUPLISTE.Enabled = False
      Shell "cat " & User.Home &/ ".config/flatdrake/flatsearchtmp" To $FLATDRAKESEARCH
      txtpkg.Text = $FLATDRAKESEARCH
      btncerca_Click
      BTNTABAVIABLE_Click
     ' $MEMOCOMMAND = "FLATDRAKESEARCH"
      ' Dim iAnswer As Integer = Message.Question("Prima di installare aggiornare le liste?", $SI, $NO)
      '  If (iAnswer = 1) Then
      '     TimerUPLISTE.Enabled = True
      '  Else
      '     Stop Event
      '  Endif 
   Endif
'COMANDI CON OPZIONE NODEPS**********************************************************************
$INSTALLNODEPS = "sudo rpm -ivh --nodeps "
$UNINSTALLNODEPS = "sudo rpm -evh --nodeps "
$UPDATENODEPS = "sudo rpm -Uvh --nodeps "
End

Public Sub EXCLUDETEST()
  Shell "grep exclude /etc/dnf/dnf.conf" Wait To $EXCLUDE
  If $EXCLUDE <> "" Then
      PICEXCLUDE.Visible = True
  Else 
      PICEXCLUDE.Visible = False
  Endif
End


Public Sub Form_Close()
    If $CLOSEPASS = 0 Then
       Dim iAnswer As Integer = Message.Question($ASKEXIT, $SI, $NO)
       If (iAnswer = 1) Then
         If PICSUSPENDLOCK.Visible = True And If $COUNTBTNCLOSE = 0 Then
            FRESETSUSPEND.Show
            $COUNTBTNCLOSE = 1
            $MEMOCOMMAND = "CLEARSUSPEND"
            Btnclose.Enabled = True
            Stop Event  
         Else           
            EXITROUTIN
         Endif 
       Else
          BTNCLOSE.Enabled = True
          Stop Event
       Endif 
    Else 
     EXITROUTIN
    Endif 
End


Public Sub Process_Read()
  Dim sStr As String
  'Read #$hProcess, sStr, -2560 '-2560 sembra risolvere i problemi in listpkg e i blocchi durante i comandi
'RADDOPPIATO IL VALORE PER ACCETTARE PIÙ PACCHETTI DURANTE LE INSTALLAZIONI********************************
  Read #$hProcess, sStr, -2560 '-2560 sembra risolvere i problemi in listpkg e i blocchi durante i comandi
  $sText = $sText & sStr
 If $PRINTLOG = 0 Then  
      If InStr($sText, $PASSWORD) > 0 Then                           'RICHIESTA INSERIMENTO PASSWORD
        FPW.Show
      Endif
      If InStr($sText, $RQSTPASSWORD) > 0 Then                      'operazione annullata se è richiesta password
       FPW.Close
       
      'Print #$hProcess, Chr$(3); '25/7/24 DISATTIVATO PERCHÈ CREA UN ERRORE SE SI ANNULLA LA PASSWORD DURANTE IL RESETSUSPEND VERIFICARE SE SERVE RIATTIVARLO
      
      Endif 
      If InStr($sText, $PROCEDERE) > 0 Then                        'PROCEDERE AD INSTALLARE
          If $SECUREMODE = "SECURE" Then
            FSINOSECURE.Show
          Else 
            FSINO.Show    
          Endif
      Endif
    '****************************************************************************************
      If InStr($sText, "Your choice:") > 0 Then                   'DOMANDA DI SELEZIONE 
        'FSELECTION.Show
        SELECTIONVIEW
        
       Endif
    '****************************************************************************************
      If InStr($sText, $FATTO) > 0 Then                           ' OPERAZIONE TERMINATA (FATTO)"
        ' If $MEMOCOMMAND = "RECOVERSUSPEND" Then   ' RIMOSSO IL RIPRISTINO DEL SUSPEND ORA AVVIENE SOLO ALLA CHIUSURA DI DNFDRAKE
        '   $CLEARLOGSUSPEND = 0
        ' Endif
        FOK.Show
      Endif
      If InStr($sText, $NONRIUSCITO) > 0 Then                   ' OPERAZIONE TERMINATA (NON RIUSCITO)"
        FOK.Show
      Endif
' '*********************************************************************************************
'       If InStr($sText, "sudo: 3") > 0 Then                   ' TEST PER PASSWORD ERRATA"
'         Message.Info("Operazione non eseguita password errata", "Ok")
'       Endif
' '*********************************************************************************************

  Endif 
  ' If InStr($sText, "~]$") Or If InStr($sText, "]#") > 0 Then '*****VECCHIO CONTROLLO USATO PRIMA DEL CAMBIO DEL PRONT*************** 
    If InStr($sText, $DNFDRAKEASK) > 0 Then
      $STATUS = 0
      $PRINTLOG = 0
'SERVE A GESTIRE LA RICERCA CON OPZIONE TUTTI**********************************
        If $ListpkgWR = 3 And $ListpkgCK = 3 Then
          $ListpkgWR = 0
          $ListpkgCK = 0
        Endif
        If $ListpkgWR = 2 And $ListpkgCK = 2 Then
          btncerca_Click
        Endif
        If $ListpkgWR = 1 And $ListpkgCK = 1 Then
          btncerca_Click
        Endif
'COMANDI POSTUMI (MEMOCOMMAND)*************************************************
  'OM-PICKER********************************************       
       If $MEMOCOMMAND = "dnf repolist" Then
          Print #$hProcess, $MEMOCOMMAND & gb.NewLine; 
          $MEMOCOMMAND = ""
          Me.Mouse = Mouse.default
          Fmain.Enabled = True
          Wait 2
          Fmain.TimerUPLISTE.Enabled = True
       Endif
  'EXCLUDE********************************************              
        If $MEMOCOMMAND = "EXCLUDETEST" Then
          EXCLUDETEST 
          $MEMOCOMMAND = ""
       Endif
       If $MEMOCOMMAND = "LISTUPDTEXCL" Then
        ' Wait 0.05  ' SE SI PREME ANNULLA SULLA FINESTRA DELLA PASSWORD IL PROGRAMMA VA IN STACKOVERFLOW
         Btnclear_Click
         TimerUPLISTE.Enabled = True
         $MEMOCOMMAND = ""
       Endif
  'MEMOCOMMAND MYREPO********************************************
       If $MEMOCOMMAND = "TMPREPOCLEAR" Then
          Print #$hProcess, "rm -f  " & User.Home & "/.config/dnfdrake/*.repo " & gb.NewLine;
          $MEMOCOMMAND = ""
          Wait 0.05
          FMYREPO.CERCAREPO
          Btnclear_Click
          Wait 0.05
          
       Endif 
  'MEMOCOMMAND AUTOREMOVE********************************************
       If $MEMOCOMMAND = "AUTOREMOVE" Then
          CERCAAUTOREMOVE
          $MEMOCOMMAND = ""          
       Endif
  'MEMOCOMMAND PULISCI SUSPEND ********************************************
       If $MEMOCOMMAND = "CLEARSUSPEND" Then
          VERIFYSUSPEND
          Btnclear_Click
          If $EASYPASSWORD = 1 And If $MEMOPW <> "NOPW" Then
             $MEMOCOMMAND = "QUITRESTORESUSPEND"
          Endif   
       Endif
 'MEMOCOMMAND CHIUDI DOPO RIPRISTINO SUSPEND*******************************
        If $MEMOCOMMAND = "QUITRESTORESUSPEND" And If $CLOSEPASS = 1 Then
           $MEMOCOMMAND = ""
           Btnclose_Click
        Endif
        If $MEMOCOMMAND = "QUITRESTORESUSPEND" And If $CLOSEPASS = 0 Then
           $MEMOCOMMAND = ""
        Endif
            
 'MEMOCOMMAND MOUSEDEFAULT*************************************************
       If $MEMOCOMMAND = "MOUSEDEFAULT" Then
         Me.Mouse = Mouse.Default
         $MEMOCOMMAND = ""
       Endif
 'INSTALLNODEPS************************************************************
      If $MEMOCOMMAND = "INSTALLNODEPS" Then
         Dim RI As String
         Print #$hProcess, "cd " & User.Home & gb.NewLine;
         Shell ("find  " & User.Home &/ ".config/dnfdrake/tmp/ |grep .rpm") To RI
         Print #$hProcess, $INSTALLNODEPS & Left(RI, -1) & Right($VERBOSE, -1) & gb.NewLine;
         '$MEMOCOMMAND = "CLEARNODEPSPKG"
         $MEMOCOMMAND = ""
      Endif
 'UPDATENODEPS************************************************************
      If $MEMOCOMMAND = "UPDATESNODEPS" Then
         Dim RU As String
         Print #$hProcess, "cd " & User.Home & gb.NewLine;
         Shell ("find  " & User.Home &/ ".config/dnfdrake/tmp/ |grep .rpm") To RU
         Print #$hProcess, $UPDATENODEPS & Left(RU, -1) & Right($VERBOSE, -1) & gb.NewLine;
         '$MEMOCOMMAND = "CLEARNODEPSPKG"
         $MEMOCOMMAND = ""
      Endif      
'**************************************************************************
       If $MEMOCOMMAND = "DISTROSYNCWAIT" Then
         $MEMOCOMMAND = ""
         VERIFYSUSPEND
         Wait 0.2
         Btnclear_Click
         txtConsole.Text = ""
         If $ABORT = 0 Then
            If BTNDISTUPDATE.Visible = True
              BTNDISTUPDATE_Click 
            Else 
              btnupdate_Click
            Endif 
         Else 
            $ABORT = 0
            Fmain.Enabled = True
         Endif
       Endif
'**************************************************************************
' RIMOSSO IL RIPRISTINO DEL SUSPEND ORA AVVIENE SOLO ALLA CHIUSURA DI DNFDRAKE
       ' If $MEMOCOMMAND = "RECOVERSUSPEND" Then
       '      If $COUNTRECOVERSUSPEND = 1 Then
       '          $MEMOCOMMAND = ""
       '          FRESETSUSPEND.Show
       '          $COUNTRECOVERSUSPEND = 0
       '      Else 
       '          $COUNTRECOVERSUSPEND = $COUNTRECOVERSUSPEND + 1 
       '          $CLEARLOGSUSPEND = 0
       '      Endif
       ' Endif

'**************************************************************************
       If $MEMOEXEC = "txtpkgclear" And $ListpkgWR = 0 Then
          Btncleartxtpkg_Click
          $MEMOEXEC = ""
       Endif
'**************************************************************************
  'IN TEST NON SO SE USARLO SE NON SI USA CANCELLARE!!!
       ' If $MEMOCOMMAND = "FLATDRAKESEARCH" Then
       '    'TimerUPLISTE.Enabled = False
       '    Shell "cat " & User.Home &/ ".config/flatdrake/flatsearchtmp" To $FLATDRAKESEARCH
       '    txtpkg.Text = $FLATDRAKESEARCH
       '    btncerca_Click
       '    BTNTABAVIABLE_Click
       '    $MEMOCOMMAND = ""
       ' Endif
'**************************************************************************
       If $ListpkgWR = 0 And If $CHKERROR > 0 And If CHKNODEPS.Value = False Then
          Try Message.Info("N°" & $CHKERROR & " ERRORS HAVE BEEN DETECTED, PLEASE IMPROVE THE SEARCH CRITERIA", "OK")
          $CHKERROR = 0
       Endif
    Else
       $STATUS = 1
    Endif
'**************************************************************************
  UpdateConsole
 
'controllo esecuzione comandi per sequenza comandi di ricerca************
  If $ListpkgWR = 1 And $STATUS = 1 Then
    $ListpkgCK = 1 
  Endif
  If $ListpkgWR = 2 And $STATUS = 0 Then
    $ListpkgCK = 0
  Endif
  If $ListpkgWR = 2 And $STATUS = 1 And $ListpkgCK = 0 Then
    $ListpkgCK = 2
  Endif
  If $ListpkgWR = 3 And $STATUS = 0 Then
    $ListpkgCK = 0
  Endif
  If $ListpkgWR = 3 And $STATUS = 1 And $ListpkgCK = 0 Then
    $ListpkgCK = 3
  Endif
'******************************************************************
End


Public Sub Process_Error(sStr As String)
  $sText = $sText & sStr
  UpdateConsole
End

Private Sub UpdateConsole()

  Dim iPos As Integer
  Dim sStr As String
  Dim s As String
  Dim sok As String
  ' Dim smid As String[]   'da elimiare se dopo 10 versioni se non presenta errori di ricerca 1.9.6
  Dim p As Integer
  'Dim x As Integer

  While Len($sText)
    iPos = InStr($sText, "\n")
    If iPos = 0 Then iPos = Len($sText)
      sStr = Normalize(Left$($sText, iPos))
 ' pulizia stringa per lista pacchetti in listpkg********************************************************
     ' questo codice serve a levare gli spazi prima e dopo il nome del pacchetto  " RTrim$(LTrim$(txtpkg.Text)))  "
  
     If InStr($sText, RTrim$(LTrim$(txtpkg.Text))) > 0 Then       
     If InStr($sText, ".x86_64") Or InStr($sText, ".noarch") Or InStr(s, ".znver1") Or InStr(s, ".aarch64") Or InStr($sText, ".i686") Then
       Try s = Scan($sText, "*[    ]*")[0]
        If Error Then
           $CHKERROR = $CHKERROR + 1
        Endif
       ' smid = Split(s, " ")   'da elimiare se dopo 10 versioni se non presenta errori di ricerca
       ' For Each s In smid    'da elimiare se dopo 10 versioni se non presenta errori di ricerca
        If InStr(s, RTrim$(LTrim$(txtpkg.Text))) > 0 Then
         s = LTrim(s)
         If Comp(s, sok) = 0 Then
        Else
'MODIFICAPER LA VISUALIZZAZIONE DEI PACCHETTI SELEZIONABILI
        If $ListpkgWR = 3 Then
          p = 1 + ListpkgINSTALLATI.Count
          ListpkgINSTALLATI.Add(p, s)
          ListpkgNODEPS.Add(p, s)
        Endif
        If $ListpkgWR = 2 Then
          p = 1 + ListpkgAVAILABLE.Count
          ListpkgAVAILABLE.Add(p, s)

        Endif
        If $ListpkgWR = 1 Then
          p = 1 + ListpkgUPGRADE.Count       
          ListpkgUPGRADE.Add(p, s)

        Endif
        If $ListpkgWR = 0 
           p = 1 + Listpkg.Count
           Listpkg.Add(p, s) 

        Endif
       ' Listpkg.Add(p, s)

'************************************************************
        sok = s
        Endif
        Endif
      ' Next   'da elimiare se dopo 10 versioni se non presenta errori di ricerca

        
     Endif
     Endif
'******************************************************************************************
    $sText = Mid$($sText, iPos + 1)
    txtConsole.Pos = txtConsole.Length
    txtConsole.Insert(sStr)
    
    
 
'*****SERVE PER NON MOSTRARE IL ^C DI ANNULLA*****************
   ' If InStr(txtConsole.text, "^C") > 0 Then
    '   Btnclear_Click
    ' Endif
'*****************************************AZIONI EXTRA ************************************************
    
'INVIA L'ULTIMA RIGA ALLA FINESTRA FRUN E CONTROLLA GLI ERRORI************************    
    If FRUN.Visible = True   
       FRUN.MONITORVIEW.Text = sStr
       
       If PICLOGODISTRO.Visible = True Then
          PICLOGODISTRO.Visible = False
       Endif
       
    Endif    
    If FPROGRESSWAIT.Visible = True Then
       FPROGRESSWAIT.MONITORVIEW.Text = sStr
    Endif
'verifica se l'operazione ha errori****ESCLUSO CON NODEPS ATTIVO***********************   
    If sStr = $DNFDRAKEASK And If FRUN.ProgressBar1.Pulse = True And If CHKNODEPS.Value = False Then 
      FRUN.ProgressBar1.Pulse = False    
      FRUN.ProgressBar1.Value = 1
      FRUN.BTNSTOP.Text = Fmain.Btnclose.Text
      FRUN.MONITORVIEW.Visible = False
      FRUN.Text = "DnfDrake,  " & "Error!" 
      FERROR.Show
      Wait 0.2
      FERROR.TextArea1.Text = txtConsole.Text
    Endif

   If sStr = $DNFDRAKEASK And If FRUN.ProgressBar1.Pulse = True And If CHKNODEPS.Value = True Then 

      FRUN.ProgressBar1.Pulse = False    
      FRUN.ProgressBar1.Value = 1
      FRUN.BTNSTOP.Text = $OK
      FRUN.BTNSTOP.Picture = Picture.Load($PATHICONS & "ok" & FMain.$THEMESSUFFIX)
      FRUN.MONITORVIEW.Visible = False
      FRUN.Text = "DnfDrake,  " & $FATTO
   Endif

'CHIUSURA FPROGRESSWAIT **************************************************************
      If sStr = $DNFDRAKEASK And FPROGRESSWAIT.Visible = True Then
         FPROGRESSWAIT.Close
      Endif      
'*************************************************************************************
  Wend
End

Public Sub Process_Kill()
  Try Me.Close
End


Public Sub txtCommand_Activate()
  'GESTIONE PER TEST LINGUE***************************************
  'RICARICA L'INTEFACCIA CON LA LINGUA IN TEST********************
  If txtCommand.Visible = True And Left(txtCommand.Text, 10) = "reloadlang" Then
     If $templang = "" Then
        Message.info("Caricare prima la lingua con magiclang xx_XX !", "OK")
        txtCommand.Text = ""   
        Wait 0.5
        txtConsole.Text = ""   
     Else 
        $LANG = $templang
        txtCommand.Text = ""   
        Wait 0.5
        txtConsole.Text = "" 
        Form_Open

'CORREZIONE BUG DOPPIO AVVIO ************************************      
        $KILL = 1
         If BTNFULLSCREEN.Visible = True Then
           BTNFULLSCREEN_Click
            Wait 0.5
            txtConsole.Text = "" 
         Else    
           BTNRESIZE_Click 
           Wait 0.5
           txtConsole.Text = "" 
         Endif
'****************************************************************        
     Endif
  '**************************************************************
  Else 
  'SCEGLIE LA LINGUA DA TESTARE**********************************  
        If txtCommand.Visible = True And Left(txtCommand.Text, 9) = "magiclang" Then
           $templang = Right(txtCommand.Text, 5)
           If $templang = "clang" Then
              Message.Info("Digitare la lingua in formato xx_XX dopo magiclang!", "Ok")
           Else  
              Message.info("La lingua di sistema è stata modificata in " & $templang & " ;-)" & " Riavviare per ripristinare la lingua di sistema!", "OK")
              Print #$hProcess, "LANG=" & $templang & ".UTF-8" & gb.NewLine;
              Wait 0.1
              Print #$hProcess, "LANGUAGE=" & $templang & ".UTF-8" & gb.NewLine;
              Wait 0.1
              Print #$hProcess, "LC_COLLATE=C" & gb.NewLine;
              Wait 0.1
              Print #$hProcess, "LC_CTYPE=" & $templang & ".UTF-8" & gb.NewLine;
              txtCommand.Text = ""   
              Wait 0.1
              txtConsole.Text = ""   
              txtlang.Text = "**"
              
           Endif  
      '*****************************************************************
        Else  
 ' ESEGUE I COMANDI NORMALI**************************************** 
            Dim sLig As String
            sLig = txtCommand.Text & gb.NewLine
            txtCommand.Clear
            sLig = Conv$(sLig, Desktop.Charset, System.Charset)
            Print #$hProcess, sLig;
        Endif
  Endif 
End


Static Private Function Normalize(sStr As String) As String

  Dim sNorm As String
  sNorm = sStr
  If System.Charset = Desktop.Charset Then 
    Return sNorm
  Else
    Return Conv$(sNorm, System.Charset, Desktop.Charset) 
  Endif
End

Private Sub TABHIDE()
    BTNTABINSTALLED.Visible = False
    BTNTABAVIABLE.Visible = False
    BTNTABUPDATE.Visible = False
    ListpkgINSTALLATI.Visible = False
    ListpkgAVAILABLE.Visible = False
    ListpkgUPGRADE.Visible = False
    ListpkgNODEPS.Visible = False
End 
Private Sub EXITROUTIN()
      Dim $PID As String
      If Exist(User.Home & "/.config/dnfdrake/repolist.tmp") Then
         Shell "rm -f " & User.Home & "/.config/dnfdrake/repolist.tmp " Wait 
      Endif
      
      $hProcess.Kill
    ' PARTE CHE SERVE A KILLARE IL PROCESSO DI DNFDRAKE SE È STATO LANCIATO DNFDRAKETRAY ********** 
      If $KILL = 1 Then
        Shell "ps aux | grep gbr3 | grep -w dnfdrake.gambas" Wait To $PID
        $PID = Right(Left($PID, 16), 8)
        Shell "kill " & $PID
      Endif  
      If $KILL = 2 Then
        Shell "ps aux | grep gbr3 | grep -w draketray.gambas" Wait To $PID
        $PID = Right(Left($PID, 16), 8)
        Shell "kill " & $PID
        Shell ("rm -f " & User.Home &/ ".config/draketray/locktray") Wait 
      Endif  
'PULIZIA DEI LOG***********************************************************
      If $CLEARLOG = 0 Then
      Else
       Dim s As String
       Dim i As Integer
       i = 0
       For Each s In Dir(User.Home &/ ".config/dnfdrake/log", "*.log*", gb.File)
          i = i + 1
       Next 
        If i > 11 And If $CLEARLOG <> 0 Then
           Shell ("find " & User.Home &/ ".config/dnfdrake/log -type f  -name '*.log' -not -name 'last.log' -mtime +" & $CLEARLOG & " -exec rm {} " & Chr$(92) & Chr$(59)) Wait
        Endif
      Endif
End


Public Sub btnCtrlC_Click()
  Print #$hProcess, Chr$(3);
End


Public Sub btnCtrlZ_Click()
  Print #$hProcess, Chr$(26);
End


Public Sub Btnclose_Click()
  $CLOSEPASS = 1
  Btnclose.Enabled = False
  If PICSUSPENDLOCK.Visible = True And If $COUNTBTNCLOSE = 0 Then
    If $EASYPASSWORD = 1 And If $MEMOPW <> "NOPW" Then
       Print #Fmain.$hProcess, "sudo systemctl unmask sleep.target suspend.target hibernate.target hybrid-sleep.target" & gb.NewLine;
    Else       
      FRESETSUSPEND.Show
      
    Endif
    $COUNTBTNCLOSE = 1
    $MEMOCOMMAND = "CLEARSUSPEND"
    Btnclose.Enabled = True
  Else 
    listpkg.Visible = False
    txtConsole.Visible = False
    Wait 0.1
    FPW.BTNANNULLA_Click
    Try Me.Close
  Endif 
    
End

Public Sub btnupdate_Click()
   'DISABILITAZIONE SUSPEND***************************
   If $WAITSUSPEND = 0 Then
        If $AUTOSUSPEND = 1 Then 
          Btnclear_Click
          txtConsole.Text = ""
          If $SECUREMODE = "SECURE" Then
            Fmain.Enabled = False
          Endif 
          $MEMOCOMMAND = "DISTROSYNCWAIT"
          $WAITSUSPEND = 1
          Print #$hProcess, "sudo systemctl mask sleep.target suspend.target hibernate.target hybrid-sleep.target" & gb.NewLine;  
        Else 
          DSTUPDATE
        Endif   
   Else 
   DSTUPDATE ' SOSTITUISCE IL CODICE PER EVITARE DI RIPETERLO *********************************
  Endif 
  PICLOGODISTRO.Visible = False  
End

Public Sub txtConsole_KeyPress()
End

Public Sub btninstall_Click()
    
    Dim a As String
    Dim s As String
    Dim spkg As String
    spkg = ""
'VERIFICA NUMERO DI PACCHETTI SELEZIONATI*************************************    
    If Val(Str(ListpkgAVAILABLE.Selection.Count)) > 10 Then
    Message.Info("It seems that you are select many packages at the same time, this can cause errors, to avoid this DnfDrake has created a temporary list for installation!", "OK")
    BTNADDPKGLIST_Click
    Endif 
'*****************************************************************************
    If TXTPKGLISTNOME.Visible = True And If TXTPKGLISTNOME.Text = "Install Package List" Then
      Print #$hProcess, $INSTALL & "$(cat " & User.Home &/ ".config/dnfdrake/log/addpkglist.txt" & " )" & $VERBOSE & gb.NewLine;
      Btnclear_Click
      FRUNSHOW
    Else  
        If Listpkg.Visible = False And If ListpkgAVAILABLE.Visible = False 'And If ListpkgUPGRADE.Visible = False  
               If txtpkg.text = ""
                 Message.Info($SELECTPKG, "OK")
               Else
                  If Right(txtpkg.Text, 4) = ".txt" Then '*************Verifica se esiste un elenco di pacchetti da installare 
                  Print #$hProcess, $INSTALL & "$(cat " & txtpkg.Text & " )" & $VERBOSE & gb.NewLine;
                  FRUNSHOW
                      Else                                  '*************Se non c'è elenco fa la solita installazione
                     Btnclear_Click
                        If Btnexp2.Text = "EXP2" Then
                           Btnexp2_Click  
                        Endif   
                      txtConsole.Text = ""
                      Me.Mouse = Mouse.Wait 
                      If CHKNODEPS.Value = True And InStr(txtpkg.Text, "/") Then
                        Print #$hProcess, $INSTALLNODEPS & txtpkg.Text & $VERBOSE & gb.NewLine;
                      Else   
                         Print #$hProcess, $INSTALL & txtpkg.Text & $VERBOSE & gb.NewLine;
                      Endif
                      FRUNSHOW
                   Endif      
               Endif
        Endif
         
         If ListpkgINSTALLATI.Visible = True Or If ListpkgUPGRADE.Visible = True Then
            Message.Info($SELECTPKG, "OK")
         Else
              
                  If ListpkgAVAILABLE.Visible = True 
                      For Each a In ListpkgAVAILABLE.Selection
                        s = ListpkgAVAILABLE[a].Text
                        s = Scan(s, "* * *")[0]
                        spkg = spkg & " " & s 
                         ListpkgAVAILABLE.Remove(a)
                      Next
                      If spkg = "" Then
                            Message.Info($SELECTPKG, "OK")
                      Else
                            ListpkgAVAILABLE.UnSelectAll
                            Btnclear_Click
                            If Btnexp2.Text = "EXP2" Then
                            Btnexp2_Click  
                            Endif
                            Me.Mouse = Mouse.Wait 
                            If CHKNODEPS.Value = False Then
                               Print #$hProcess, $INSTALL & spkg & $VERBOSE & gb.NewLine;
                            Else   
                                PICLOGODISTRO.Visible = False 
                                $FRUNPW = 1
                                Wait 0.1
                                Print #$hProcess, "cd " & User.Home &/ ".config/dnfdrake/tmp/" & gb.NewLine;
                                Wait 0.1
                                Print #$hProcess, "dnf download " & spkg & $VERBOSE & gb.NewLine;
                                $MEMOCOMMAND = "INSTALLNODEPS"
                            Endif
                            FRUNSHOW
                      Endif
                  Endif
                 
               If $OFFLINE = 0 Then   
                 If Listpkg.Visible = True Then
                   If Cmbtipo.index = 2 Or If Cmbtipo.index = 0
                      For Each a In Listpkg.Selection
                        s = Listpkg[a].Text
                        ' s = Scan(s, "* * *")[0]
                        spkg = spkg & " " & s 
                        Listpkg.Remove(a)
                      Next
                      If spkg = "" Then
                         Message.Info($SELECTPKG, "OK")
                      Else
                        Listpkg.UnSelectAll
                        Btnclear_Click
                        If Btnexp2.Text = "EXP2" Then
                        Btnexp2_Click  
                        Endif
                        Me.Mouse = Mouse.Wait 
                        If CHKNODEPS.Value = False Then
                           Print #$hProcess, $INSTALL & spkg & $VERBOSE & gb.NewLine;
                        Else 
                           'Message.Info("NoDeps work only in offline mode!", "Ok")  
                           PICLOGODISTRO.Visible = False
                           $FRUNPW = 1
                           Wait 0.1
                           Print #$hProcess, "cd " & User.Home &/ ".config/dnfdrake/tmp/" & gb.NewLine;
                           Wait 0.1
                           Print #$hProcess, "dnf download " & spkg & $VERBOSE & gb.NewLine; 
                           $MEMOCOMMAND = "INSTALLNODEPS"    
                        Endif
                        FRUNSHOW
                     Endif
                   Endif   
                 Endif
               Endif  
        Endif
    Endif
End

Public Sub txtpkg_KeyPress()

End

Public Sub txtpkg_Activate()
 btncerca_Click
End

Public Sub btnremove_Click()
    Dim a As String
    Dim s As String
    Dim spkg As String
    spkg = ""
 
'VERIFICA NUMERO DI PACCHETTI SELEZIONATI*************************************    
    If Val(Str(ListpkgINSTALLATI.Selection.Count)) > 10 Then
          Message.Info("It seems that you are select many packages at the same time, this can cause errors, to avoid this DnfDrake has created a temporary list for uninstallation! ", "OK")
          BTNADDPKGLIST_Click
    Endif 
'*****************************************************************************
    If TXTPKGLISTNOME.Visible = True And If TXTPKGLISTNOME.Text = "Remove Package List" Then
      Print #$hProcess, $UNINSTALL & "$(cat " & User.Home &/ ".config/dnfdrake/log/rempkglist.txt " & ")" & $VERBOSE & gb.NewLine;
      Btnclear_Click
      FRUNSHOW
    Else  
        If Listpkg.Visible = False And If ListpkgINSTALLATI.Visible = False  
           If txtpkg.text = "" Then
            Message.Info($SELECTPKG, "OK")
           Else
               If Right(txtpkg.Text, 4) = ".txt" Then '*************Verifica se esiste un elenco di pacchetti da installare 
                  Print #$hProcess, $UNINSTALL & "$(cat " & txtpkg.Text & " )" & $VERBOSE & gb.NewLine;
                  FRUNSHOW
                      Else                                  '*************Se non c'è elenco fa la solita installazione          
                  Btnclear_Click
                     If Btnexp2.Text = "EXP2" Then
                         Btnexp2_Click  
                     Endif  
                 txtConsole.Text = ""
                 Me.Mouse = Mouse.Wait 
                  If CHKNODEPS.Value = False Then
                    Print #$hProcess, $UNINSTALL & txtpkg.Text & $VERBOSE & gb.NewLine;
                  Else 
                    Print #$hProcess, $UNINSTALLNODEPS & txtpkg.Text & $VERBOSE & gb.NewLine;
                    'Print #$hProcess, "sudo rpm -evh " & txtpkg.Text & " --nodeps " & $VERBOSE & gb.NewLine;
                  Endif
                 FRUNSHOW
              Endif    
            Endif
        Endif
        
        If ListpkgAVAILABLE.Visible = True Or If ListpkgUPGRADE.Visible = True Then
            Message.Info($SELECTPKG, "OK")
        Else
      
                  If ListpkgINSTALLATI.Visible = True 
                      For Each a In ListpkgINSTALLATI.Selection
                        s = ListpkgINSTALLATI[a].Text
                        s = Scan(s, "* * *")[0]
                        spkg = spkg & " " & s 
                         ListpkgINSTALLATI.Remove(a)
                      Next
                        If spkg = "" Then
                            Message.Info($SELECTPKG, "OK")
                        Else
                            ListpkgINSTALLATI.UnSelectAll
                            Btnclear_Click
                              If Btnexp2.Text = "EXP2" Then
                                Btnexp2_Click  
                              Endif
                            Me.Mouse = Mouse.Wait 
                            If CHKNODEPS.Value = False Then
                               Print #$hProcess, $UNINSTALL & spkg & $VERBOSE & gb.NewLine;
                            Else 
                              Print #$hProcess, $UNINSTALLNODEPS & spkg & $VERBOSE & gb.NewLine;
                              ' Print #$hProcess, "sudo rpm -evh " & spkg & " --nodeps " & $VERBOSE & gb.NewLine;

                            Endif
                            
                            FRUNSHOW
                        Endif
                  Endif
             If $OFFLINE = 0 Then
                 If Listpkg.Visible = True Then
                   If Cmbtipo.index = 1 Or If Cmbtipo.index = 0
                      For Each a In Listpkg.Selection
                        s = Listpkg[a].Text
                       ' s = Scan(s, "* * *")[0]
                        spkg = spkg & " " & s 
                        Listpkg.Remove(a)
                   Next
                          If spkg = "" Then
                             Message.Info($SELECTPKG, "OK")
                          Else
                              Listpkg.UnSelectAll
                              Btnclear_Click
                                If Btnexp2.Text = "EXP2" Then
                                  Btnexp2_Click  
                                Endif
                            Me.Mouse = Mouse.Wait 
                            
                            If CHKNODEPS.Value = False Then
                                Print #$hProcess, $UNINSTALL & spkg & $VERBOSE & gb.NewLine;
                            Else 
                                Print #$hProcess, $UNINSTALLNODEPS & spkg & $VERBOSE & gb.NewLine;
                                ' Print #$hProcess, "sudo rpm -evh " & spkg & " --nodeps " & $VERBOSE & gb.NewLine;
                            Endif
                           
                            FRUNSHOW
                          Endif
                     Endif   
                 Endif
             Endif
         Endif
    Endif
  ' Endif 
  If $SECUREMODE <> "SECURE" Then
    Me.Mouse = Mouse.default
  Endif
End

Public Sub BTNPKGUPDATE_Click()
    Dim a As String
    Dim s As String
    Dim spkg As String
    spkg = ""
'VERIFICA NUMERO DI PACCHETTI SELEZIONATI*************************************    
    If Val(Str(ListpkgUPGRADE.Selection.Count)) > 5 Then
      Message.Info("It seems that you are select many packages at the same time, this can cause errors, to avoid this DnfDrake has created a temporary list for installation!\n It is recommended to use 'Update Sys' or 'Distro Sync' button!", "OK")
      BTNADDPKGLIST_Click
    Endif 
'*****************************************************************************
    If TXTPKGLISTNOME.Visible = True And If TXTPKGLISTNOME.Text = "Update Package List" Then
      Print #$hProcess, $PKGUPDATE & "$(cat " & User.Home &/ ".config/dnfdrake/log/updpkglist.txt" & " )" & $VERBOSE & gb.NewLine;
      Btnclear_Click
      FRUNSHOW
    Else  
        If Listpkg.Visible = False And If ListpkgUPGRADE.Visible = False 
            If txtpkg.text = "" Then
               Message.Info($SELECTPKG, "OK")
            Else
               If Right(txtpkg.Text, 4) = ".txt" Then '*************Verifica se esiste un elenco di pacchetti da installare 
                  Print #$hProcess, $PKGUPDATE & "$(cat " & txtpkg.Text & " )" & $VERBOSE & gb.NewLine;
                  FRUNSHOW
                      Else                                  '*************Se non c'è elenco fa la solita installazione
                    Btnclear_Click
                     If Btnexp2.Text = "EXP2" Then
                         Btnexp2_Click  
                     Endif   
                   txtConsole.Text = ""
                   Me.Mouse = Mouse.Wait  
                    If CHKNODEPS.Value = True And InStr(txtpkg.Text, "/") > 1 Then
                       Print #$hProcess, $UPDATENODEPS & txtpkg.Text & $VERBOSE & gb.NewLine;
                    Else   
                         Print #$hProcess, $PKGUPDATE & txtpkg.Text & $VERBOSE & gb.NewLine;
                    Endif 
                    FRUNSHOW
              Endif 
            Endif
        Endif
        
        If ListpkgINSTALLATI.Visible = True Or If ListpkgAVAILABLE.Visible = True Then
            Message.Info($SELECTPKG, "OK")
         Else
      
                  If ListpkgUPGRADE.Visible = True 
                      For Each a In ListpkgUPGRADE.Selection
                        s = ListpkgUPGRADE[a].Text
                        s = Scan(s, "* * *")[0]
                        spkg = spkg & " " & s 
                         ListpkgUPGRADE.Remove(a) 
                      Next
                        If spkg = "" Then
                            Message.Info($SELECTPKG, "OK")
                        Else
                        ListpkgUPGRADE.UnSelectAll
                        Btnclear_Click
                          If Btnexp2.Text = "EXP2" Then
                            Btnexp2_Click  
                          Endif
                           Me.Mouse = Mouse.Wait 
                           If CHKNODEPS.Value = False Then
                              Print #$hProcess, $PKGUPDATE & spkg & $VERBOSE & gb.NewLine;
                           Else 
                              PICLOGODISTRO.Visible = False 
                              $FRUNPW = 1 
                              Print #$hProcess, "cd " & User.Home &/ ".config/dnfdrake/tmp/" & gb.NewLine;
                              Wait 0.1
                              Print #$hProcess, "dnf download " & spkg & $VERBOSE & gb.NewLine; 
                              $MEMOCOMMAND = "UPDATESNODEPS" 
                           Endif
                           FRUNSHOW
                        Endif
                  Endif
                
             If $OFFLINE = 0 Then 
                 If Listpkg.Visible = True Then
                   If Cmbtipo.index = 3 Or If Cmbtipo.index = 0
                      For Each a In Listpkg.Selection
                        s = Listpkg[a].Text
                       ' s = Scan(s, "* * *")[0]
                        spkg = spkg & " " & s 
                        Listpkg.Remove(a)
                      Next
                      If spkg = "" Then
                         Message.Info($SELECTPKG, "OK")
                      Else
                          Listpkg.UnSelectAll
                          Btnclear_Click
                              If Btnexp2.Text = "EXP2" Then
                                  Btnexp2_Click  
                              Endif
                          Me.Mouse = Mouse.Wait 
                          If CHKNODEPS.Value = False Then
                             Print #$hProcess, $PKGUPDATE & spkg & $VERBOSE & gb.NewLine; 
                          Else 
                             'Message.Info("NoDeps work only in offline mode!", "Ok")  
                              PICLOGODISTRO.Visible = False
                              $FRUNPW = 1  
                              Print #$hProcess, "cd " & User.Home &/ ".config/dnfdrake/tmp/" & gb.NewLine;
                              Wait 0.1
                              Print #$hProcess, "dnf download " & spkg & $VERBOSE & gb.NewLine; 
                              $MEMOCOMMAND = "UPDATESNODEPS" 
                          Endif
                          FRUNSHOW
                      Endif
                   Endif   
                 Endif
             Endif
        Endif
    Endif     
End

Public Sub txtCommand_KeyPress()

End

Public Sub Btnexp1_Click()
    PICLOGODISTRO.Visible = False
    If Btnexp2.Text = "UEXP2" Then
    Btnexp2_Click
  Endif
  If Btnexp1.Text = "EXP1" Then
    Btnexp1.Text = "UEXP1"
    If Fmain.Width > 1366 Then
      txtConsole.Width = 1330 + ($RISOLUZIONEX - 1366) - Listpkg.Width - 5
      txtConsole.Height = 476 + ($RISOLUZIONEY - 768)
      txtConsole.X = listpkg.Width + listpkg.X
    Else 
      txtConsole.Width = 1029
      txtConsole.Height = 476
      txtConsole.X = 308
    Endif   
    txtConsole.Y = 147
    txtConsole.Visible = True
    Listpkg.Visible = True
    btnpkg.Visible = True
    BTNSELECTALL.Visible = True
    BTNUNSELECTALL.Visible = True
      If $OFFLINE = 1
        BTNADDPKGLIST.Visible = True
        BTNPKGLISTVIEW.Visible = True
        BTNPKGLISTCLEAN.Visible = True
        TXTPKGLISTLABEL.Visible = True
        TXTPKGLISTNOME.Visible = True
        
      Else 
        BTNADDPKGLIST.Visible = False
        BTNPKGLISTVIEW.Visible = False 
        TXTPKGLISTLABEL.Visible = False
        TXTPKGLISTNOME.Visible = False
        BTNPKGLISTCLEAN.Visible = False
      Endif           
    TABHIDE
    
    
    Else
      Btnexp1.Text = "EXP1"
      txtConsole.Visible = False
      Listpkg.Visible = False
      ListpkgINSTALLATI.Visible = False
      ListpkgAVAILABLE.Visible = False
      ListpkgUPGRADE.Visible = False
      btnpkg.Visible = False
      BTNTABINSTALLED.Visible = False
      BTNTABAVIABLE.Visible = False
      BTNTABUPDATE.Visible = False
      BTNSELECTALL.Visible = False
      BTNUNSELECTALL.Visible = False
      BTNADDPKGLIST.Visible = False
      BTNPKGLISTVIEW.Visible = False 
      TXTPKGLISTLABEL.Visible = False
      TXTPKGLISTNOME.Visible = False
      BTNPKGLISTCLEAN.Visible = False
      ListpkgINSTALLATI.Visible = False
      ListpkgAVAILABLE.Visible = False
      ListpkgUPGRADE.Visible = False
      TABHIDE
  Endif
End

Public Sub Btnexp2_Click()
      PICLOGODISTRO.Visible = False
      If Btnexp1.Text = "UEXP1" Then
       Btnexp1_Click
    Endif
   If Btnexp2.Text = "EXP2" Then
    Btnexp2.Text = "UEXP2"
    If Fmain.Width > 1366 Then
       txtConsole.Width = 1330 + ($RISOLUZIONEX - 1366)
       txtConsole.Height = 476 + ($RISOLUZIONEY - 768)
    Else    
      txtConsole.Width = 1330
      txtConsole.Height = 476
    Endif
    txtConsole.X = 10  
    txtConsole.Y = 147
    txtConsole.Visible = True
    TABHIDE
  Else
      Btnexp2.Text = "EXP2"
      txtConsole.Visible = False
      If Fmain.Width > 1366 Then
        txtConsole.Width = 1330 + ($RISOLUZIONEX - 1366) - Listpkg.Width - 5
        txtConsole.Height = 476 + ($RISOLUZIONEY - 768)
        txtConsole.X = listpkg.Width + listpkg.X
      Else 
        txtConsole.Width = 1330
        txtConsole.Height = 476
        txtConsole.X = 308
      Endif   
      txtConsole.Y = 147
      TABHIDE
  Endif
End

Public Sub btninfo_Click()
   
   Btnclear_Click
   TABHIDE
   If Listpkg.Visible = True Then
   Endif
   If Cmbtipoinfo.index = 5 Then                                'REPO
        If Btnexp2.Text = "EXP2" Then
           Btnexp2_Click 
        Endif
      txtConsole.Text = ""
      Print #$hProcess, "dnf repolist" & gb.NewLine;
      PICLOGODISTRO.Visible = False  
   Else
      If txtpkg.text = "" Then 
          Message.Info($SELECTPKG, "OK")
   Else
      If Btnexp2.Text = "EXP2" Then
          Btnexp2_Click 
   Endif
   If Cmbtipoinfo.index = 0                                         'GENERALE
      txtConsole.Text = ""
      Print #$hProcess, "dnf info " & txtpkg.Text & $VERBOSE & gb.NewLine;
      PICLOGODISTRO.Visible = False  
   Endif
   If Cmbtipoinfo.Index = 3                                         'CHANGELOG
     txtConsole.Text = ""
     Print #$hProcess, "dnf provides " & txtpkg.Text & $VERBOSE & gb.NewLine;
     PICLOGODISTRO.Visible = False  
   Endif
   If Cmbtipoinfo.Index = 1                                         'DIPENDENZE
      txtConsole.Text = ""
      Print #$hProcess, "dnf deplist " & txtpkg.Text & " | grep dependency" & $VERBOSE & gb.NewLine;
      PICLOGODISTRO.Visible = False  
   Endif
   If Cmbtipoinfo.Index = 2                                            'FILE
     txtConsole.Text = ""
      If Cmbtipo.Index = 1
         Print #$hProcess, "rpm -ql " & txtpkg.Text & $VERBOSE & gb.NewLine;
         PICLOGODISTRO.Visible = False  
      Else
         Print #$hProcess, "repoquery -l " & txtpkg.Text & $VERBOSE & gb.NewLine;
         PICLOGODISTRO.Visible = False  
      Endif
   Endif
   If Cmbtipoinfo.index = 4                                             'HOMEPAGE                                              
      txtConsole.Text = ""
      Print #$hProcess, "dnf info " & txtpkg.Text & " | grep URL" & $VERBOSE & gb.NewLine;
      PICLOGODISTRO.Visible = False  
   Endif
  Endif
 Endif
End 

Public Sub btncerca_Click()
     $STATUS = 1                                  ' AGGIUNTA A VERSIONE 1.17.32 PER LA GESTIONE DEL TASTO PULISCI
   If Cmbtipo.index = 0 Then                      'TUTTI
    If $OFFLINE = 0 
     If txtpkg.Text = "" Then
          txtConsole.Text = ""
          Me.Mouse = Mouse.Wait  
          Print #$hProcess, "dnf list " & gb.NewLine; 
          ' PICLOGODISTRO.Visible = False  
          If Btnexp2.Text = "EXP2" Then
             Btnexp2_Click 
          Endif
       Else
          If Btnexp1.Text = "EXP1" Then
             Btnexp1_Click 
          Endif
          If $ListpkgWR = 0 And $ListpkgCK = 0
          Btnclear_Click
          ' Endif
'****************************************************************
          Me.Mouse = Mouse.Wait  
          Print #$hProcess, "dnf " & $SEARCH & " list | grep " & txtpkg.Text & gb.NewLine;
          PICLOGODISTRO.Visible = False 
          ' $MEMOEXEC = "txtpkgclear"
        Endif
        Endif
'**********************************************************          
 'RICERCA OFFLINE*********************************************************************
    $MEMOCOMMAND = "MOUSEDEFAULT"
    Else
     
     Btnclear_Click
          
     If Btnexp1.Text = "EXP1" Then
     Btnexp1_Click 
     Endif
     
     BTNTABINSTALLED.Visible = True
     BTNTABAVIABLE.Visible = True
     BTNTABUPDATE.Visible = True
     Me.Mouse = Mouse.Wait  
     CERCAUPDATE
     Me.Mouse = Mouse.Wait  
     CERCAAVAILABLE
     Me.Mouse = Mouse.Wait  
     CERCAINSTALLED
     BTNINSTALVIEW
    Endif
 Endif


   '****************************************************************************
   
   If Cmbtipo.index = 1 Then 
     
'PARTE IN MODIFICA PER NODEPS************************************************************

    ' If CHKNODEPS.Value = True Then
    '    CERCANODEPS
    ' Else   

'ENDIF IN CODA **************************************************************************

     If $OFFLINE = 0                        'INSTALLATI
        TABHIDE
          If txtpkg.Text = "" Then
              If Btnexp2.Text = "EXP2" Then
                Btnexp2_Click 
              Endif
             txtConsole.Text = ""  
            Me.Mouse = Mouse.Wait  
            Print #$hProcess, "dnf list installed" & gb.NewLine;
             PICLOGODISTRO.Visible = False 
          Else
              If Btnexp1.Text = "EXP1" Then
                 Btnexp1_Click 
              Endif
                Btnclear_Click
                Me.Mouse = Mouse.Wait  
                Print #$hProcess, "dnf list installed| grep " & txtpkg.Text & gb.NewLine;
                 PICLOGODISTRO.Visible = False 
                ' $MEMOEXEC = "txtpkgclear"
          Endif
     $MEMOCOMMAND = "MOUSEDEFAULT"
  'RICERCA OFFLINE*********************************************************************
     Else
         TABHIDE
         Btnclear_Click

          If Btnexp1.Text = "EXP1" Then
              Btnexp1_Click 
          Endif
         Me.Mouse = Mouse.Wait  
         CERCAINSTALLED
         BTNINSTALVIEW

'************************************************
     ' Endif
'************************************************


    Endif  
  Endif  
'***********************************************************************************   
   
   If Cmbtipo.index = 2 Then                          'NON INSTALLATI
      If $OFFLINE = 0 
         TABHIDE
            If txtpkg.Text = ""
                If Btnexp2.Text = "EXP2" Then
                   Btnexp2_Click 
                Endif
              txtConsole.Text = ""
              Me.Mouse = Mouse.Wait  
              Print #$hProcess, "dnf list available" & gb.NewLine; 
               PICLOGODISTRO.Visible = False 
            Else
                If Btnexp1.Text = "EXP1" Then
                   Btnexp1_Click 
                Endif
                Btnclear_Click
                Me.Mouse = Mouse.Wait  
                Print #$hProcess, "dnf " & $SEARCH & " list available | grep " & txtpkg.Text & gb.NewLine;
                 PICLOGODISTRO.Visible = False   
                ' $MEMOEXEC = "txtpkgclear"
            Endif
     $MEMOCOMMAND = "MOUSEDEFAULT"
    'RICERCA OFFLINE*********************************************************************
     Else
            TABHIDE
            Btnclear_Click
          
          If Btnexp1.Text = "EXP1" Then
             Btnexp1_Click 
          Endif
           ' BTNTABINSTALLED.Visible = False
           ' BTNTABAVIABLE.Visible = True
           ' BTNTABUPDATE.Visible = False
             Me.Mouse = Mouse.Wait  
             CERCAAVAILABLE
             BTNAVAILABLEVIEW
     Endif
  Endif  
   
   
'*************************************************************************************************  
   
   If Cmbtipo.index = 3 Then                            'UPDATE
      If $OFFLINE = 0 
        TABHIDE
            If txtpkg.Text = ""
                If Btnexp2.Text = "EXP2" Then
                  Btnexp2_Click 
                Endif
               txtConsole.Text = ""
               Me.Mouse = Mouse.Wait  
               Print #$hProcess, "dnf list upgrades" & gb.NewLine;
                PICLOGODISTRO.Visible = False  
            Else
                If Btnexp1.Text = "EXP1" Then
                  Btnexp1_Click 
                Endif
                Btnclear_Click
                Me.Mouse = Mouse.Wait  
                Print #$hProcess, "dnf list upgrades  |grep " & txtpkg.Text & gb.NewLine;
                 PICLOGODISTRO.Visible = False  
                ' $MEMOEXEC = "txtpkgclear"
            Endif
     $MEMOCOMMAND = "MOUSEDEFAULT"
    'RICERCA OFFLINE*********************************************************************
     Else
           TABHIDE
           Btnclear_Click
            If Btnexp1.Text = "EXP1" Then
               Btnexp1_Click 
            Endif
              ' BTNTABINSTALLED.Visible = False
              ' BTNTABAVIABLE.Visible = False
              ' BTNTABUPDATE.Visible = True
              Me.Mouse = Mouse.Wait  
              CERCAUPDATE
              BTNUPDATEVIEW
     Endif
  Endif
'AUTORMOVE LIST*****************************************************************************  
If Cmbtipo.index = 4 Then                     'AUTOREMOVE
   If $OFFLINE = 0 
      TABHIDE
      Btnclear_Click
      If Btnexp2.Text = "EXP2" Then
         Btnexp2_Click 
      Endif
      If $LOG = "LOG" Then
          Me.Mouse = Mouse.Wait  
          Print #$hProcess, "dnf list autoremove" & $VERBOSE & gb.NewLine;
           PICLOGODISTRO.Visible = False 
        Else 
          Me.Mouse = Mouse.Wait  
          Print #$hProcess, "dnf list autoremove" & gb.NewLine;
           PICLOGODISTRO.Visible = False 
      Endif
    $MEMOCOMMAND = "MOUSEDEFAULT" 
   Else 
     Btnclear_Click
'CORREZIONE VISUALIZZAZIONE MASCHERA ****************************************
     If Btnexp1.Text = "EXP1" Then
        Btnexp1_Click
     Endif
 'MODIFICHE RISPETTO A BTNEXP1
     If Fmain.Width > 1366 Then
       txtConsole.Width = 1330 + ($RISOLUZIONEX - 1366)
       txtConsole.Height = 476 + ($RISOLUZIONEY - 768)
    Else
     txtConsole.Width = 1330
     txtConsole.Height = 476
    Endif
     txtConsole.X = 10
     txtConsole.Y = 147
     txtConsole.Visible = True
     listpkg.Visible = False
     btnpkg.Visible = False
  '*************************************************
     Me.Mouse = Mouse.Wait  
     Print #$hProcess, "dnf list autoremove" & $VERBOSE & gb.NewLine;
      PICLOGODISTRO.Visible = False 
     Me.Mouse = Mouse.Wait  
     $MEMOCOMMAND = "AUTOREMOVE"
   Endif    
Endif
'********************************************************************************************
If Cmbtipo.index = 5 Then 
        CERCANODEPS
    ' Else   
Endif     
'Me.Mouse = Mouse.Default 
End

Public Sub NODEPSTMPCLEAR()
  Dim R As String
  Shell ("find  " & User.Home &/ ".config/dnfdrake/tmp/ |grep .rpm") To R
  If R <> "" Then
     Shell ("rm -f " & User.Home &/ ".config/dnfdrake/tmp/*.rpm")
  Endif
  
End

Public Sub VERIFYSUSPEND()
  If Exist("/etc/systemd/system/sleep.target") And If Exist("/etc/systemd/system/suspend.target") And If Exist("/etc/systemd/system/hibernate.target") And If Exist("/etc/systemd/system/hybrid-sleep.target") Then
   ' BTNSUSPEND.Text = "    Suspend Off"
    BTNSUSPEND.Tooltip = $SUSPENDOFFTTP
    PICSUSPEND.Visible = False
    PICSUSPENDLOCK.Visible = True
  Else 
   ' BTNSUSPEND.Text = "    Suspend On"
    BTNSUSPEND.Tooltip = $SUSPENDONTTP
    PICSUSPEND.Visible = True
    PICSUSPENDLOCK.Visible = False
  Endif          
End

Private Sub RESOLUTION()

If BTNFULLSCREEN.Visible = True  
  Fmain.X = 0
  Fmain.Y = 0
  Fmain.Height = ($RISOLUZIONEY - 70)
  Fmain.Width = ($RISOLUZIONEX)
  Btnclose.X = Btnclose.X + ($RISOLUZIONEX - 1366)
  BTNABOUT.X = BTNABOUT.X + ($RISOLUZIONEX - 1366)
  BTNMYREPO.X = BTNMYREPO.X + ($RISOLUZIONEX - 1366)
  BTNPICKER.X = BTNPICKER.X + ($RISOLUZIONEX - 1366)
  Btncommand.Y = Btncommand.Y + ($RISOLUZIONEY - 768)
  PCTCONNECT.X = PCTCONNECT.X + ($RISOLUZIONEX - 1366) / 2
  PCTDISCONNECT.X = PCTDISCONNECT.X + ($RISOLUZIONEX - 1366) / 2
  BORDOCONNECT.X = BORDOCONNECT.X + ($RISOLUZIONEX - 1366) / 2
  Label1.X = Label1.X + ($RISOLUZIONEX - 1366) / 2
  txtlang.X = txtlang.X + ($RISOLUZIONEX - 1366) / 2 
  CORNICE.Width = CORNICE.Width + ($RISOLUZIONEX - 1366)
  CORNICE.Height = CORNICE.Height + ($RISOLUZIONEY - 768)
  listpkg.Width = listpkg.Width * ($RISOLUZIONEX / 1366)
  Listpkg.Height = Listpkg.Height + ($RISOLUZIONEY - 768)
  ListpkgINSTALLATI.Width = ListpkgINSTALLATI.Width + ($RISOLUZIONEX - 1366)
  ListpkgINSTALLATI.Height = ListpkgINSTALLATI.Height + ($RISOLUZIONEY - 768)
  ListpkgAVAILABLE.Width = ListpkgAVAILABLE.Width + ($RISOLUZIONEX - 1366)
  ListpkgAVAILABLE.Height = ListpkgAVAILABLE.Height + ($RISOLUZIONEY - 768)
  ListpkgUPGRADE.Width = ListpkgUPGRADE.Width + ($RISOLUZIONEX - 1366)
  ListpkgUPGRADE.Height = ListpkgUPGRADE.Height + ($RISOLUZIONEY - 768)
  ListpkgNODEPS.Width = ListpkgNODEPS.Width + ($RISOLUZIONEX - 1366)
  ListpkgNODEPS.Height = ListpkgNODEPS.Height + ($RISOLUZIONEY - 768)
  TXTINFOBOX.Width = TXTINFOBOX.Width + ($RISOLUZIONEX - 1366)
  TXTINFOBOX.Height = TXTINFOBOX.Height + ($RISOLUZIONEY - 768)
  HBox1.Y = HBox1.Y + ($RISOLUZIONEY - 768)
  Btnclear.X = Btnclear.X + ($RISOLUZIONEX - 1366)
  Btnclear.Y = Btnclear.Y + ($RISOLUZIONEY - 768)
  BTNCUSTOM.X = BTNCUSTOM.X + ($RISOLUZIONEX - 1366)
  BTNCUSTOM.Y = BTNCUSTOM.Y + ($RISOLUZIONEY - 768)
  BTNVIEWLOG.X = BTNVIEWLOG.X + ($RISOLUZIONEX - 1366)
  BTNVIEWLOG.Y = BTNVIEWLOG.Y + ($RISOLUZIONEY - 768)
  BTNREPLAY.X = BTNREPLAY.X + ($RISOLUZIONEX - 1366)
  BTNREPLAY.Y = BTNREPLAY.Y + ($RISOLUZIONEY - 768)
  BTNSELECTALL.Y = BTNSELECTALL.Y + ($RISOLUZIONEY - 768)
  BTNUNSELECTALL.Y = BTNUNSELECTALL.y + ($RISOLUZIONEY - 768)
  btnpkg.Y = btnpkg.Y + ($RISOLUZIONEY - 768)
  BTNTABINSTALLED.Y = BTNTABINSTALLED.Y + ($RISOLUZIONEY - 768)
  BTNTABAVIABLE.Y = BTNTABAVIABLE.Y + ($RISOLUZIONEY - 768)
  BTNTABUPDATE.Y = BTNTABUPDATE.Y + ($RISOLUZIONEY - 768)
  BTNADDPKGLIST.Y = BTNADDPKGLIST.y + ($RISOLUZIONEY - 768)
  TXTPKGLISTLABEL.Y = TXTPKGLISTLABEL.Y + ($RISOLUZIONEY - 768)
  TXTPKGLISTNOME.Y = TXTPKGLISTNOME.Y + ($RISOLUZIONEY - 768)
  BTNPKGLISTVIEW.Y = BTNPKGLISTVIEW.Y + ($RISOLUZIONEY - 768)
  BTNPKGLISTCLEAN.Y = BTNPKGLISTCLEAN.Y + ($RISOLUZIONEY - 768)
  BTNFULLSCREEN.Visible = False
  BTNRESIZE.Visible = True
  PICLOGODISTRO.Width = PICLOGODISTRO.Width + ($RISOLUZIONEX - 1366)
  PICLOGODISTRO.Height = PICLOGODISTRO.Height + ($RISOLUZIONEY - 768)
  LBLSELECTION.X = LBLSELECTION.X + ($RISOLUZIONEX - 1366)
  LBLTXTSELECTION.X = LBLTXTSELECTION.X + ($RISOLUZIONEX - 1366)
  TXTSELECTION.X = TXTSELECTION.X + ($RISOLUZIONEX - 1366)
  BTNOKSELECTION.X = BTNOKSELECTION.X + ($RISOLUZIONEX - 1366)
  BTNANNULLASELECTION.X = BTNANNULLASELECTION.X + ($RISOLUZIONEX - 1366)

Else 
  Fmain.X = 0
  Fmain.Y = 0
  Fmain.Height = 700
  Fmain.Width = 1366
  Btnclose.X = 1232
  BTNABOUT.X = 1232
  BTNMYREPO.X = 1232
  BTNPICKER.X = 1232
  Btncommand.Y = 662
  PCTCONNECT.X = 546
  PCTDISCONNECT.X = 546
  BORDOCONNECT.X = 546
  Label1.X = 574
  txtlang.X = 770 
  CORNICE.Width = 1337
  CORNICE.Height = 490
  listpkg.Width = 294
  Listpkg.Height = 476
  ListpkgINSTALLATI.Width = 1332 - 8
  ListpkgINSTALLATI.Height = 476
  ListpkgAVAILABLE.Width = 1332 - 8
  ListpkgAVAILABLE.Height = 476
  ListpkgUPGRADE.Width = 1332 - 8
  ListpkgUPGRADE.Height = 476
  ListpkgNODEPS.Width = 1332 - 8
  ListpkgNODEPS.Height = 476
  TXTINFOBOX.Width = 770
  TXTINFOBOX.Height = 476
  HBox1.Y = 662
  Btnclear.X = 1232
  Btnclear.Y = 662
  BTNCUSTOM.X = 1162
  BTNCUSTOM.Y = 662
  BTNVIEWLOG.X = 1232
  BTNVIEWLOG.Y = 630
  BTNREPLAY.X = 1162
  BTNREPLAY.Y = 630
  BTNSELECTALL.Y = 630
  BTNUNSELECTALL.Y = 630
  btnpkg.Y = 630
  BTNTABINSTALLED.Y = 630
  BTNTABAVIABLE.Y = 630
  BTNTABUPDATE.Y = 630
  BTNADDPKGLIST.Y = 630
  TXTPKGLISTLABEL.Y = 630
  TXTPKGLISTNOME.Y = 630
  BTNPKGLISTVIEW.Y = 630
  BTNPKGLISTCLEAN.Y = 630
  BTNRESIZE.Visible = False
  BTNFULLSCREEN.Visible = True
  PICLOGODISTRO.Width = 1332 - 8
  PICLOGODISTRO.Height = 476
  LBLSELECTION.X = 1120
  LBLTXTSELECTION.X = 1141
  TXTSELECTION.X = 1141
  BTNOKSELECTION.X = 1141
  BTNANNULLASELECTION.X = 1239
Endif 
End

Private Sub CERCAUPDATE()
     
     Dim s As String
     Dim t As Stream
     Dim p As Integer
     Dim N As Integer
     Me.Mouse = Mouse.Wait  
     ListpkgUPGRADE.Mode = 2
     ListpkgUPGRADE.Enabled = True
     BTNTABUPDATE.SetFocus
     BTNTABUPDATE_Click
     t = Open User.Home & "/.config/dnfdrake/updates.txt"
     For Each s In t.Lines
        If InStr(s, ".x86_64") Or InStr(s, ".noarch") Or InStr(s, ".znver1") Or InStr(s, ".aarch64") Or InStr(s, ".i686") And If RTrim$(LTrim$(txtpkg.Text)) = "" Then
            p = p + ListpkgUPGRADE.Count
'FIX LUNGHEZZA NOME******************************************            
               If Len(s) < 80 Then
                 s = s & "     ***...name too long***"
                 N = Len(s)
                 While N < 80
                   s = s & " "
                   N = N + 1
                 Wend 
               Endif
'***********************************************************
            ListpkgUPGRADE.add(p, s & "     Upgrades")
            If $COLORTEXT = "color"
            ListpkgUPGRADE[p].Foreground = &H0033A0D9
            Endif
        Else
            If $CASE = 1 Then
                If InStr(s, ".x86_64") Or InStr(s, ".noarch") Or InStr(s, ".znver1") Or InStr(s, ".aarch64") Or InStr(s, ".i686") And If InStr(s, RTrim$(LTrim$(txtpkg.Text)), 0, gb.IgnoreCase)
                  p = p + ListpkgUPGRADE.Count
'FIX LUNGHEZZA NOME******************************************            
               If Len(s) < 80 Then
                 s = s & "     ***...name too long***"
                 N = Len(s)
                 While N < 80
                   s = s & " "
                   N = N + 1
                 Wend 
               Endif
'***********************************************************
                  ListpkgUPGRADE.add(p, s & "     Upgrades")
                    If $COLORTEXT = "color"
                      ListpkgUPGRADE[p].Foreground = &H0033A0D9
                    Endif
                Endif

            Else 
                If InStr(s, ".x86_64") Or InStr(s, ".noarch") Or InStr(s, ".znver1") Or InStr(s, ".aarch64") Or InStr(s, ".i686") And If InStr(s, RTrim$(LTrim$(txtpkg.Text)))
                  p = p + ListpkgUPGRADE.Count
'FIX LUNGHEZZA NOME******************************************            
               If Len(s) < 80 Then
                 s = s & "     ***...name too long***"
                 N = Len(s)
                 While N < 80
                   s = s & " "
                   N = N + 1
                 Wend 
               Endif
'***********************************************************
                  ListpkgUPGRADE.add(p, s & "     Upgrades")
                    If $COLORTEXT = "color"
                      ListpkgUPGRADE[p].Foreground = &H0033A0D9
                    Endif
                Endif
            Endif     
        Endif
     Next
     If ListpkgUPGRADE.Count = 0 Then
       ListpkgUPGRADE.Mode = 0
       ListpkgUPGRADE.Add(1, $NOTPACKAGES)
       If $COLORTEXT = "color"
       ListpkgUPGRADE[1].Foreground = &H0033A0D9
       Endif
       ListpkgUPGRADE.Enabled = False
     Endif
     t.Close
     Me.Mouse = Mouse.Default
 
 End
 
Private Sub CERCAAVAILABLE()
  
     Dim s As String
     Dim t As Stream
     Dim p As Integer
     Me.Mouse = Mouse.Wait  
      ListpkgAVAILABLE.Mode = 2
      ListpkgAVAILABLE.Enabled = True
     BTNTABAVIABLE.SetFocus
     BTNTABAVIABLE_Click
     t = Open User.Home & "/.config/dnfdrake/noninstallati.txt"
     For Each s In t.Lines
        If InStr(s, ".x86_64") Or InStr(s, ".noarch") Or InStr(s, ".znver1") Or InStr(s, ".aarch64") Or InStr(s, ".i686") And If RTrim$(LTrim$(txtpkg.Text)) = "" Then
            p = p + ListpkgAVAILABLE.Count
            ListpkgAVAILABLE.add(p, s & "   Available")
                If $COLORTEXT = "color"
                  ListpkgAVAILABLE[p].Foreground = &H00F47E59
                Endif
        Else
            If $CASE = 1 Then
                 If InStr(s, ".x86_64") Or InStr(s, ".noarch") Or InStr(s, ".znver1") Or InStr(s, ".aarch64") Or InStr(s, ".i686") And If InStr(s, RTrim$(LTrim$(txtpkg.Text)), 0, gb.IgnoreCase)
                    p = p + ListpkgAVAILABLE.Count
                    ListpkgAVAILABLE.add(p, s & "   Available")
                      If $COLORTEXT = "color"
                        ListpkgAVAILABLE[p].Foreground = &H00F47E59
                      Endif
                 Endif
            Else  
                 If InStr(s, ".x86_64") Or InStr(s, ".noarch") Or InStr(s, ".znver1") Or InStr(s, ".aarch64") Or InStr(s, ".i686") And If InStr(s, RTrim$(LTrim$(txtpkg.Text)))
                    p = p + ListpkgAVAILABLE.Count
                    ListpkgAVAILABLE.add(p, s & "   Available")
                      If $COLORTEXT = "color"
                        ListpkgAVAILABLE[p].Foreground = &H00F47E59
                      Endif
                 Endif
            Endif      
        Endif
     Next
      If ListpkgAVAILABLE.Count = 0 Then
       ListpkgAVAILABLE.Mode = 0
       ListpkgAVAILABLE.Add(1, $NOTPACKAGES)
       If $COLORTEXT = "color"
       ListpkgAVAILABLE[1].Foreground = &H00F47E59
       Endif
       ListpkgAVAILABLE.Enabled = False
     Endif
     t.Close
     Me.Mouse = Mouse.Default

End

Private Sub CERCAINSTALLED()
  
     Dim s As String
     Dim t As Stream
     Dim p As Integer
     Me.Mouse = Mouse.Wait  
     ListpkgINSTALLATI.Mode = 2
     ListpkgINSTALLATI.Enabled = True
     BTNTABINSTALLED.SetFocus
     BTNTABINSTALLED_Click
     t = Open User.Home & "/.config/dnfdrake/installati.txt"
     For Each s In t.Lines 
            If InStr(s, ".x86_64") Or InStr(s, ".noarch") Or InStr(s, ".znver1") Or InStr(s, ".aarch64") Or InStr(s, ".i686") And If RTrim$(LTrim$(txtpkg.Text)) = "" Then
               p = p + ListpkgINSTALLATI.Count
               ListpkgINSTALLATI.add(p, s & "     Installed")
                  If $COLORTEXT = "color"
                    ListpkgINSTALLATI[p].Foreground = &H0038D079
                  Endif
            Else
               If $CASE = 1 Then
                  If InStr(s, ".x86_64") Or InStr(s, ".noarch") Or InStr(s, ".znver1") Or InStr(s, ".aarch64") Or InStr(s, ".i686") And If InStr(s, RTrim$(LTrim$(txtpkg.Text)), 0, gb.IgnoreCase) Then
                     p = p + ListpkgINSTALLATI.Count
                     ListpkgINSTALLATI.add(p, s & "     Installed")
                        If $COLORTEXT = "color"
                           ListpkgINSTALLATI[p].Foreground = &H0038D079
                        Endif 
                  Endif                     
               Else  
                  If InStr(s, ".x86_64") Or InStr(s, ".noarch") Or InStr(s, ".znver1") Or InStr(s, ".aarch64") Or InStr(s, ".i686") And If InStr(s, RTrim$(LTrim$(txtpkg.Text))) Then
                     p = p + ListpkgINSTALLATI.Count
                     ListpkgINSTALLATI.add(p, s & "     Installed")
                        If $COLORTEXT = "color"
                           ListpkgINSTALLATI[p].Foreground = &H0038D079
                        Endif
                  Endif
               Endif     
            Endif
     Next
      If ListpkgINSTALLATI.Count = 0 Then
       ListpkgINSTALLATI.Mode = 0
       ListpkgINSTALLATI.Add(1, $NOTPACKAGES)
       If $COLORTEXT = "color"
       ListpkgINSTALLATI[1].Foreground = &H0038D079
       Endif
       ListpkgINSTALLATI.Enabled = False
     Endif
     t.Close  
     Me.Mouse = Mouse.Default

  
End

Private Sub CERCANODEPS()
Dim s As String
Dim t As Stream
Dim p As Integer
Btnclear_Click
If ListpkgNODEPS.Count > 0 Then
    ListpkgNODEPS.SelectAll
    ListpkgNODEPS.Clear
    ListpkgNODEPS.UnSelectAll
Endif
PICLOGODISTRO.Visible = False
Me.Mouse = Mouse.Wait  
Wait 0.05
Shell ("rpm -qa >" & User.Home & "/.config/dnfdrake/nodeps.txt") Wait 
ListpkgNODEPS.Mode = 1
ListpkgNODEPS.Enabled = True
ListpkgNODEPS.Visible = True 
CORNICE.Background = &aa0000&
BTNINSTALVIEW
ListpkgINSTALLATI.Visible = False
ListpkgAVAILABLE.Visible = False
ListpkgUPGRADE.Visible = False 
ListpkgNODEPS.Visible = True
t = Open User.Home & "/.config/dnfdrake/nodeps.txt"

 For Each s In t.Lines 
            If InStr(s, ".x86_64") Or InStr(s, ".noarch") Or InStr(s, ".znver1") Or InStr(s, ".aarch64") Or InStr(s, ".i686") And If RTrim$(LTrim$(txtpkg.Text)) = "" Then
               p = p + ListpkgNODEPS.Count
               ListpkgNODEPS.add(p, s)
                  If $COLORTEXT = "color"
                    ListpkgNODEPS[p].Foreground = &H0038D079
                  Endif
            Else
               If $CASE = 1 Then
                  If InStr(s, ".x86_64") Or InStr(s, ".noarch") Or InStr(s, ".znver1") Or InStr(s, ".aarch64") Or InStr(s, ".i686") And If InStr(s, RTrim$(LTrim$(txtpkg.Text)), 0, gb.IgnoreCase) Then
                     p = p + ListpkgNODEPS.Count
                     ListpkgNODEPS.add(p, s)
                        If $COLORTEXT = "color"
                           ListpkgNODEPS[p].Foreground = &H0038D079
                        Endif 
                  Endif                     
               Else  
                  If InStr(s, ".x86_64") Or InStr(s, ".noarch") Or InStr(s, ".znver1") Or InStr(s, ".aarch64") Or InStr(s, ".i686") And If InStr(s, RTrim$(LTrim$(txtpkg.Text))) Then
                     p = p + ListpkgNODEPS.Count
                     ListpkgNODEPS.add(p, s)
                        If $COLORTEXT = "color"
                           ListpkgNODEPS[p].Foreground = &H0038D079
                        Endif
                  Endif
               Endif     
            Endif
     Next
      If ListpkgNODEPS.Count = 0 Then
       ListpkgNODEPS.Mode = 0
       ListpkgNODEPS.Add(1, $NOTPACKAGES)
       If $COLORTEXT = "color"
       ListpkgNODEPS[1].Foreground = &H0038D079
       Endif
       ListpkgNODEPS.Enabled = False
     Endif
     t.Close  


Me.Mouse = Mouse.default  
End


Private Sub CERCAAUTOREMOVE()
  
     Dim s As String
     Dim t As Stream
     Dim p As Integer
     Me.Mouse = Mouse.Wait  
     ListpkgINSTALLATI.Mode = 2
     ListpkgINSTALLATI.Enabled = True
     BTNTABINSTALLED.SetFocus
     BTNTABINSTALLED_Click
     t = Open User.Home & "/.config/dnfdrake/log/last.log"
     For Each s In t.Lines 
            If InStr(s, ".x86_64") Or InStr(s, ".noarch") Or InStr(s, ".znver1") Or InStr(s, ".aarch64") Or InStr(s, ".i686") Then
               p = p + ListpkgINSTALLATI.Count
               ListpkgINSTALLATI.add(p, s & "     Autoremove")
                  If $COLORTEXT = "color"
                    ListpkgINSTALLATI[p].Foreground = &HFF7F00
                  Endif
            Endif
     Next
      If ListpkgINSTALLATI.Count = 0 Then
         ListpkgINSTALLATI.Mode = 0
         ListpkgINSTALLATI.Add(1, $NOTPACKAGES)
          If $COLORTEXT = "color"
             ListpkgINSTALLATI[1].Foreground = &HFF7F00
          Endif
         ListpkgINSTALLATI.Enabled = False
      Else 
         ListpkgINSTALLATI.SelectAll   
     Endif
     t.Close
     Me.Mouse = Mouse.Default
     

End


Private Sub BTNINSTALVIEW()
  If $SECUREMODE = "SECURE" Then
      btninstall.Enabled = False
      If CHKNODEPS.Value = False Then
         BTNREINSTALL.Enabled = True
         BTNDOWNDGRADE.Enabled = True
      Else      
        BTNREINSTALL.Enabled = False
        BTNDOWNDGRADE.Enabled = False
      Endif
      btnremove.Enabled = True
      BTNPKGUPDATE.Enabled = False 
      If TXTPKGLISTNOME.Text = "None" Then
        Else 
          TXTPKGLISTNOME.Text = "Remove Package List"
      Endif
  Endif
     
End

Private Sub BTNAVAILABLEVIEW()
  If $SECUREMODE = "SECURE" Then
      btninstall.Enabled = True
      BTNREINSTALL.Enabled = False
      BTNDOWNDGRADE.Enabled = False
      btnremove.Enabled = False
      BTNPKGUPDATE.Enabled = False 
      If TXTPKGLISTNOME.Text = "None" Then
        Else 
          TXTPKGLISTNOME.Text = "Install Package List"
      Endif
  Endif 
  
End

Private Sub BTNUPDATEVIEW()
  If $SECUREMODE = "SECURE" Then
      btninstall.Enabled = False
      BTNREINSTALL.Enabled = False
      BTNDOWNDGRADE.Enabled = False
      btnremove.Enabled = False
      BTNPKGUPDATE.Enabled = True 
      If TXTPKGLISTNOME.Text = "None" Then
        Else 
          TXTPKGLISTNOME.Text = "Update Package List"
      Endif
  Endif
    
End

Private Sub BTNALLVIEW()
  btninstall.Enabled = True
  BTNREINSTALL.Enabled = True
  BTNDOWNDGRADE.Enabled = True
  btnremove.Enabled = True
  BTNPKGUPDATE.Enabled = True 
  
End

Private Sub FRUNSHOW()
 'GESTIONE FINESTRA FRUN***************************
If $SECUREMODE = "SECURE" Then
    If $FRUNPW = 1 Then
      FRUN.Show
    Endif
    $FRUNMAIN = 1
Endif
PICLOGODISTRO.Visible = False  
'************************************************* 
End 
Private Sub DSTRSYNC()

   Dim $UPDATERETRY As String
   $WAITSUSPEND = 0 
   Btnclear_Click
   If Btnexp2.Text = "EXP2" Then
   Btnexp2_Click  
   Endif
  
  txtConsole.Text = ""
  'Shell "find /var/cache/dnf/ -iname " & Chr(34) & "*.rpm" & Chr(34) Wait To $UPDATERETRY 
  Shell "ls -R /var/cache/dnf |grep rpm" Wait To $UPDATERETRY  'QUESTO COMANDO SOSTITUISCE QUELLO PRECEDENTE PER FIX DEL RESUMEUPDATA IN ROSALINUX 
  
  If InStr($UPDATERETRY, "rpm") > 0 Then 
     FUPDATERESUME.Show
  Else 
    Me.Mouse = Mouse.Wait 
    ' $MEMOCOMMAND = "RECOVERSUSPEND" ' RIMOSSO IL RIPRISTINO DEL SUSPEND ORA AVVIENE SOLO ALLA CHIUSURA DI DNFDRAKE
    If $LOG = "NOLOG"
    Print #$hProcess, "sudo dnf clean all; dnf clean all; dnf repolist; sudo dnf --refresh --allowerasing distro-sync" & $VERBOSE & gb.NewLine;
    FRUNSHOW
    Wait 2
    '$MEMOCOMMAND = "RECOVERSUSPEND" ' RIMOSSO IL RIPRISTINO DEL SUSPEND ORA AVVIENE SOLO ALLA CHIUSURA DI DNFDRAKE
    Endif 
    If $LOG = "LOG" Then
    DATATIME
    Print #$hProcess, "sudo dnf clean all; dnf clean all; dnf repolist; sudo dnf --refresh --allowerasing distro-sync | tee " & User.Home & "/.config/dnfdrake/log/" & $DATATIME & "-dnfdrakelog-sync.log " & User.Home & "/.config/dnfdrake/log/last.log" & gb.NewLine;
    FRUNSHOW
    'Wait 2
    Endif
    ' RIMOSSO IL RIPRISTINO DEL SUSPEND ORA AVVIENE SOLO ALLA CHIUSURA DI DNFDRAKE
    ' If $AUTOSUSPEND = 1 Then
    '   '$MEMOCOMMAND = "RECOVERSUSPEND"
    'Endif
  Endif 
End

Private Sub DSTUPDATE()
 Dim $UPDATERETRY As String
   Btnclear_Click
   If Btnexp2.Text = "EXP2" Then
     Btnexp2_Click  
   Endif
  Me.Mouse = Mouse.Wait 
  txtConsole.Text = ""
  'Shell "find /var/cache/dnf/ -iname " & Chr(34) & "*.rpm" & Chr(34) Wait To $UPDATERETRY 
  Shell "ls -R /var/cache/dnf |grep rpm " Wait To $UPDATERETRY   'QUESTO COMANDO SOSTITUISCE QUELLO PRECEDENTE PER FIX DEL RESUMEUPDATA IN ROSALINUX 
  If InStr($UPDATERETRY, "rpm") > 0 Then 
     FUPDATERESUME.Show
  Else 
    If $LOG = "NOLOG"
      Print #$hProcess, $UPDATE & $VERBOSE & gb.NewLine;
      FRUNSHOW
    Endif 
    If $LOG = "LOG" Then
      DATATIME
      Print #$hProcess, $UPDATE & "| tee " & User.Home & "/.config/dnfdrake/log/" & $DATATIME & "-dnfdrakelog-update.log " & User.Home & "/.config/dnfdrake/log/last.log" & gb.NewLine;
      FRUNSHOW
    Endif
    If $AUTOSUSPEND = 1 Then
      $MEMOCOMMAND = "RECOVERSUSPEND"
    Endif
  Endif 
End

Public Sub LOADICONS()
'GESTIONE ERRORE PER ASSENZA ICONE A CAUSA DI SPEC ERRATO IN  OPENMANDRIVA ***********
   Try BTNAUTOREMOVE.Picture = Picture.Load($PATHICONS & "trash" & $THEMESSUFFIX)
   If Error Then
     $PATHICONS = "/usr/share/dnfdrake/"
     BTNAUTOREMOVE.Picture = Picture.Load($PATHICONS & "trash" & $THEMESSUFFIX)
   Endif
'**************************************************************************************
    'BTNAUTOREMOVE.Picture = Picture.Load($PATHICONS & "trash" & $THEMESSUFFIX)
    PICEXCLUDE.Picture = Picture.Load($PATHICONS & "lock" & $THEMESSUFFIX)
    BTNRESIZE.Picture = Picture.Load($PATHICONS & "restore" & $THEMESSUFFIX)
    BTNFULLSCREEN.Picture = Picture.Load($PATHICONS & "fullscreen" & $THEMESSUFFIX)
    Btncleartxtpkg.Picture = Picture.Load($PATHICONS & "clear" & $THEMESSUFFIX)
    Btnpathfile.Picture = Picture.Load($PATHICONS & "open-folder" & $THEMESSUFFIX)
    Btnpathpkglist.Picture = Picture.Load($PATHICONS & "save-as" & $THEMESSUFFIX)
    PICBTNDISTUPDATE.Picture = Picture.Load($PATHICONS & "updatesync" & $THEMESSUFFIX)
    btnupdate.Picture = Picture.Load($PATHICONS & "updatesys" & $THEMESSUFFIX)
    BTNVIEWLOG.Picture = Picture.Load($PATHICONS & "open-folder" & $THEMESSUFFIX)
    Btnclear.Picture = Picture.Load($PATHICONS & "clear" & $THEMESSUFFIX)
    BTNREPLAY.Picture = Picture.Load($PATHICONS & "view-log" & $THEMESSUFFIX)
    BTNSELECTALL.Picture = Picture.Load($PATHICONS & "add" & $THEMESSUFFIX)
    BTNUNSELECTALL.Picture = Picture.Load($PATHICONS & "remove" & $THEMESSUFFIX)
    BTNTABINSTALLED.Picture = Picture.Load($PATHICONS & "installed.png")
    BTNTABAVIABLE.Picture = Picture.Load($PATHICONS & "install.png")
    BTNTABUPDATE.Picture = Picture.Load($PATHICONS & "update.png")
    BTNPKGLISTCLEAN.Picture = Picture.Load($PATHICONS & "trash" & $THEMESSUFFIX)
    BTNADDPKGLIST.Picture = Picture.Load($PATHICONS & "insert-text" & $THEMESSUFFIX)
    BTNPKGLISTVIEW.Picture = Picture.Load($PATHICONS & "view-log" & $THEMESSUFFIX)
    PCTCONNECT.Picture = Picture.Load($PATHICONS & "offline" & $THEMESSUFFIX)
    PCTDISCONNECT.Picture = Picture.Load($PATHICONS & "online" & $THEMESSUFFIX)
    PICSUSPEND.Picture = Picture.Load($PATHICONS & "suspend" & $THEMESSUFFIX)
    PICSUSPENDLOCK.Picture = Picture.Load($PATHICONS & "lock" & $THEMESSUFFIX)
    BTNCUSTOM.Picture = Picture.Load($PATHICONS & "bacchetta" & $THEMESSUFFIX)
    Btnclose.Picture = Picture.Load($PATHICONS & "esci" & $THEMESSUFFIX)
    BTNABOUT.Picture = Picture.Load($PATHICONS & "info" & $THEMESSUFFIX)
    btninstall.Picture = Picture.Load($PATHICONS & "add" & $THEMESSUFFIX)
    btnremove.Picture = Picture.Load($PATHICONS & "remove" & $THEMESSUFFIX)
    btncerca.Picture = Picture.Load($PATHICONS & "search" & $THEMESSUFFIX)
    BtnCFG.Picture = Picture.Load($PATHICONS & "config" & $THEMESSUFFIX)
    Btndownload.Picture = Picture.Load($PATHICONS & "download" & $THEMESSUFFIX)
    Btncrono.Picture = Picture.Load($PATHICONS & "chronometer" & $THEMESSUFFIX)
    Btncommand.Picture = Picture.Load($PATHICONS & "console" & $THEMESSUFFIX)
    btnstop.Picture = Picture.Load($PATHICONS & "stop" & $THEMESSUFFIX)
    BTNMYREPO.Picture = Picture.Load($PATHICONS & "repository" & $THEMESSUFFIX)
    btninfo.Picture = Picture.Load($PATHICONS & "details" & $THEMESSUFFIX)
    BTNDOWNDGRADE.Picture = Picture.Load($PATHICONS & "undo" & $THEMESSUFFIX)
    BTNPKGUPDATE.Picture = Picture.Load($PATHICONS & "redo" & $THEMESSUFFIX)
    BTNREINSTALL.Picture = Picture.Load($PATHICONS & "refresh" & $THEMESSUFFIX)
    BTNEXTRA.Picture = Picture.Load($PATHICONS & "extra" & $THEMESSUFFIX)
    PICNODEPS.Picture = Picture.Load($PATHICONS & "task-attention" & $THEMESSUFFIX)
    BTNOKSELECTION.Picture = Picture.Load($PATHICONS & "ok" & $THEMESSUFFIX)
    BTNANNULLASELECTION.Picture = Picture.Load($PATHICONS & "stop" & $THEMESSUFFIX)
    btnpkg.Picture = Picture.Load($PATHICONS & "textlink" & $THEMESSUFFIX)
End


Public Sub DRAKETRAYUPDATE()
  ' VERIFICA SE È ABILITATA LA NOTIFICA AGGIORNAMENTI CON DRAKETRAY
    If Not Exist(User.Home &/ ".config/autostart/draketray.desktop") And If Not Exist(User.Home &/ ".config/dnfdrake/noautostart") Then
       Dim iAnswer As Integer = Message.Question($MSGUPDATESASK, $SI, $NO)
       If (iAnswer = 1) Then
         If Not Exist(User.Home &/ ".config/autostart") Then
            Shell ("mkdir " & User.Home &/ ".config/autostart")
         Endif
         If Not Exist(User.Home &/ "/.config/draketray/locktray") Then
            Shell ("/usr/bin/draketray.gambas") 
            Sleep 1.1
            $KILL = 2
         Endif
         Shell ("cp /usr/share/draketray/draketray.desktop  " & User.Home &/ ".config/autostart/")
         Dim $CONFIGDRAKETRAY As Integer
         $CONFIGDRAKETRAY = Val(File.Load(User.Home &/ "/.config/draketray/config")) 
         If $CONFIGDRAKETRAY = 0 Then
            File.Save(User.Home &/ "/.config/draketray/config", "1") 
         Endif
         If $CONFIGDRAKETRAY = 2 Then
            File.Save(User.Home &/ "/.config/draketray/config", "3") 
         Endif
         'FEXTRA.Show
        Else
          File.Save(User.Home &/ ".config/dnfdrake/noautostart", "") 
          'Stop Event
       Endif 
    Endif
' ESEGUE LA PULIZIA DI RESIDUI DI DNFDRAKETRAY*****************
If Exist("/usr/bin/dnfdraketray.gambas") And If Exist("/usr/bin/draketray.gambas") Then
   Message.Info($MSGTRAYREMOVE, $SI)
   If Exist(User.Home &/ ".config/autostart/dnfdraketray.desktop") Then
      Shell ("rm -f " & User.Home &/ ".config/autostart/dnfdraketray.desktop")
   Endif
   Dim $PID As String
   Shell "ps aux | grep gbr3 | grep -w dnfdraketray.gambas" Wait To $PID
   $PID = Right(Left($PID, 16), 8)
   Shell "kill " & $PID
   Shell ("rm -f " & User.Home &/ ".config/dnfdrake/locktray") Wait 
   Shell ("rmdir " & User.Home &/ ".config/dnfdraketray/") Wait 
   txtpkg.Text = "dnfdraketray"
   btnremove_Click
Endif
    
    
End


Public Sub TMPLISTCLEAN()

  If Exist(User.Home &/ ".config/dnfdrake/log/rempkglist.txt") Then
    Shell "echo  > " & User.Home &/ ".config/dnfdrake/log/rempkglist.txt" Wait
  Endif
  If Exist(User.Home &/ ".config/dnfdrake/log/addpkglist.txt") Then
    Shell "echo  > " & User.Home &/ ".config/dnfdrake/log/addpkglist.txt" Wait
  Endif
  If Exist(User.Home &/ ".config/dnfdrake/log/updpkglist.txt") Then
    Shell "echo  > " & User.Home &/ ".config/dnfdrake/log/updpkglist.txt" Wait
  Endif
  TXTPKGLISTNOME.Text = "None"
End
' Public Sub INSTALLNODEPS()
'   Dim a As String
'   Dim s As String
'   Dim spkg As String
'   spkg = ""
'   
'    Print #$hProcess, "cd " & User.Home &/ ".config/dnfdrake/tmp/"
' '************************************************************* 
'         If ListpkgINSTALLATI.Visible = False And ListpkgAVAILABLE.Visible = False And ListpkgUPGRADE.Visible = False And If Listpkg.Visible = False Then
'         Else   
'                  If ListpkgAVAILABLE.Visible = True 
'                          For Each a In ListpkgAVAILABLE.Selection
'                            s = ListpkgAVAILABLE[a].Text
'                            s = Scan(s, "* * *")[0]
'                            spkg = spkg & " " & s 
'                             ListpkgAVAILABLE.Remove(a)
'                          Next
'                            ListpkgAVAILABLE.UnSelectAll
'                            Btnclear_Click
'                            If Btnexp2.Text = "EXP2" Then
'                               Btnexp2_Click  
'                            Endif
'                            If spkg = "" Then
'                                Message.Info($SELECTPKG, "OK")
'                            Else
'                               Print #$hProcess, "dnf download " & spkg & $VERBOSE & gb.NewLine;
'                               PICLOGODISTRO.Visible = False  
'                               If $SECUREMODE = "SECURE" Then
'                                  FPROGRESSWAIT.Show
'                               Endif
'                            Endif
'                  Endif   
'                   If ListpkgUPGRADE.Visible = True 
'                          For Each a In ListpkgUPGRADE.Selection
'                            s = ListpkgUPGRADE[a].Text
'                            s = Scan(s, "* * *")[0]
'                            spkg = spkg & " " & s 
'                             ListpkgUPGRADE.Remove(a) 
'                          Next
'                            ListpkgUPGRADE.UnSelectAll
'                            Btnclear_Click
'                            If Btnexp2.Text = "EXP2" Then
'                                Btnexp2_Click  
'                            Endif
'                            If spkg = "" Then
'                                Message.Info($SELECTPKG, "OK")
'                            Else
'                               Print #$hProcess, "dnf download " & spkg & $VERBOSE & gb.NewLine;
'                               PICLOGODISTRO.Visible = False  
'                               If $SECUREMODE = "SECURE" Then
'                                  FPROGRESSWAIT.Show
'                               Endif
'                            Endif
'                   Endif
'           Else
'                   If Listpkg.Visible = True Then
'                       For Each a In Listpkg.Selection
'                         s = Listpkg[a].Text
'                        ' s = Scan(s, "* * *")[0]
'                         spkg = spkg & " " & s 
'                         Listpkg.Remove(a)
'                       Next
'                         Listpkg.UnSelectAll
'                       Btnclear_Click
'                         If Btnexp2.Text = "EXP2" Then
'                           Btnexp2_Click  
'                         Endif
'                         If spkg = "" Then
'                            Message.Info($SELECTPKG, "OK")
'                         Else
'                           Print #$hProcess, "dnf download " & spkg & $VERBOSE & gb.NewLine;
'                           PICLOGODISTRO.Visible = False  
'                           If $SECUREMODE = "SECURE" Then
'                              FPROGRESSWAIT.Show
'                           Endif
'                         Endif 
'                   Endif
'           Endif    
'       Endif
'                   Btnclear_Click
'                   If Btnexp2.Text = "EXP2" Then
'                      Btnexp2_Click  
'                   Endif
'   Endif 
'   
' End

Public Sub SELECTIONVIEW()
  TXTSELECTION.Text = ""
  If LBLSELECTION.Visible = False Then
     LBLTXTSELECTION.Visible = True
     TXTSELECTION.Visible = True
     LBLSELECTION.Visible = True
     BTNOKSELECTION.Visible = True
     BTNANNULLASELECTION.Visible = True
     If Fmain.Enabled = False Then
       Fmain.Enabled = True
     Endif
     ' If BTNOKSELECTION.Enabled = False Then
     '    BTNOKSELECTION.Enabled = True
     ' Endif
     ' If BTNANNULLASELECTION.Enabled = False Then
     '    BTNANNULLASELECTION.Enabled = True
     ' Endif
     TXTSELECTION.SetFocus
  Else 
     TXTSELECTION.Visible = False
     LBLTXTSELECTION.Visible = False
     LBLSELECTION.Visible = False
     BTNOKSELECTION.Visible = False
     BTNANNULLASELECTION.Visible = False
     If Fmain.Enabled = True And If FRUN.Visible = True Then
       Fmain.Enabled = False
     Endif
  Endif
  
  
End 
Public Sub LOADLOGO()
   If InStr($DISTRO, "OpenMandriva", 0, gb.IgnoreCase) Then
    If $THEMES = "Oxygen" Or If $THEMES = "Breeze" Then
            PICLOGODISTRO.Picture = Picture.Load("/usr/share/dnfdrake/OMA.png")
         Else If $THEMES = "BreezeDark"
            PICLOGODISTRO.Picture = Picture.Load("/usr/share/dnfdrake/OMA-BD.png")   
         Endif
  Else 
      If InStr($DISTRO, "ROSA", 0, gb.IgnoreCase) Then 
         If $THEMES = "Oxygen" Or If $THEMES = "Breeze" Then
            PICLOGODISTRO.Picture = Picture.Load("/usr/share/dnfdrake/ROSA.png")   
         Else If $THEMES = "BreezeDark"
            PICLOGODISTRO.Picture = Picture.Load("/usr/share/dnfdrake/ROSA-BD.png")   
         Endif
         
         'PICLOGODISTRO.Picture = Picture.Load("/usr/share/dnfdrake/OMA.png")
      Else 
         PICLOGODISTRO.Picture = Picture.Load("/usr/share/dnfdrake/LINUX.png")
      Endif
  Endif     
  
  
End


Public Sub Cmbtipo_Click()
If Cmbtipo.Text = "Autoremove" Then
  txtpkg.Text = $AUTOREMOVETEXT
  Cmbtipo.Tooltip = $AUTOREMOVETEXT
  txtpkg.Enabled = False
  $CLEARTXTPKG = 1
Else 
  txtpkg.Enabled = True  
  Cmbtipo.Tooltip = $CMBTOOLTIP
  If $CLEARTXTPKG = 1
    txtpkg.Text = ""
    $CLEARTXTPKG = 0
  Endif 
  txtpkg.SetFocus
Endif
End

Public Sub Label1_MouseDown()
End


Public Sub Btncommand_Click()

  Btnclear_Click
  txtCommand.SetFocus
  If txtCommand.Visible = False Then
    Btncommand.Text = Btncommand.Text & " ^"
    HBox1.Visible = True
    HBox1.Tooltip = $HBOX1TOOLTIP
    txtCommand.Visible = True
    btnCtrlC.Visible = True
    btnCtrlZ.Visible = True
      If Btnexp2.Text = "EXP2" Then
        Btnexp2_Click 
      Endif
    PICLOGODISTRO.Visible = False  
  Else
      Btncommand.Text = Left(Btncommand.Text, -2)
      HBox1.Visible = False
      HBox1.Tooltip = ""
      txtCommand.Visible = False
      btnCtrlC.Visible = False
      btnCtrlZ.Visible = False
      Btnexp2_Click 
      PICLOGODISTRO.Visible = True
      
  Endif

End

Public Sub Btncrono_Click()

   Btnclear_Click
   If Btnexp2.Text = "EXP2" Then
   Btnexp2_Click  
   Endif
   txtConsole.Text = ""
   Print #$hProcess, "dnf history" & gb.NewLine;
   PICLOGODISTRO.Visible = False  
  
End


Public Sub Btnclear_Click()

    Listpkg.SelectAll
    Listpkg.Clear
    Listpkg.UnSelectAll
    
    ListpkgINSTALLATI.SelectAll
    ListpkgINSTALLATI.Clear
    ListpkgINSTALLATI.UnselectAll
    
    ListpkgAVAILABLE.SelectAll
    ListpkgAVAILABLE.Clear
    ListpkgAVAILABLE.UnselectAll
    
    ListpkgUPGRADE.SelectAll
    ListpkgUPGRADE.Clear
    ListpkgUPGRADE.UnselectAll
    
    ListpkgNODEPS.SelectAll
    ListpkgNODEPS.Clear
    ListpkgNODEPS.UnSelectAll

    txtConsole.text = ""
'GESTIONE PER POTER INSTALLARE DA TXTPKG SE PRESENTI AGGIONAMENTI
      If $OFFLINE = 1 Then
        If Btncommand.Text = Btncommand.Text Then
              If Btnexp2.Text = "EXP2" 
                 Btnexp2_Click
              Endif
           TABHIDE
           Listpkg.Visible = False
        Endif
      Else 
          If $STATUS = 0     
             Listpkg.Visible = False
               If Btnexp1.Text = "UEXP1" Then
                 Btnexp1_Click
               Endif
          Endif
      Endif
      'If $COLORTEXT = "color"
        CORNICE.Background = True
     ' Endif 
     BTNALLVIEW
      Me.Mouse = Mouse.Default
      $PROGRESSBARFORCESUSPEND = 0
      If txtCommand.Visible = False Then
       PICLOGODISTRO.Visible = True
      Endif 
End

Public Sub BTNABOUT_Click()
  FABOUT.Show
  End




Public Sub btnpkg_Click()
    Dim a As String
    Dim s As String
    If ListpkgINSTALLATI.Visible = True Then
      For Each a In ListpkgINSTALLATI.Selection
      s = ListpkgINSTALLATI[a].Text
      s = Scan(s, "* * *")[0]
      txtpkg.Text = txtpkg.Text & " " & s
      ' ListpkgINSTALLATI.Remove(a)
    Next
     ListpkgINSTALLATI.UnSelectAll
    Else
      If ListpkgAVAILABLE.Visible = True Then
      For Each a In ListpkgAVAILABLE.Selection
      s = ListpkgAVAILABLE[a].Text
      s = Scan(s, "* * *")[0]
      txtpkg.Text = txtpkg.Text & " " & s
      'ListpkgAVAILABLE.Remove(a)
    Next
    ListpkgAVAILABLE.UnSelectAll
    Else
     If ListpkgUPGRADE.Visible = True Then
      For Each a In ListpkgUPGRADE.Selection
      s = ListpkgUPGRADE[a].Text
      s = Scan(s, "* * *")[0]
      txtpkg.Text = txtpkg.Text & " " & s
      ' ListpkgUPGRADE.Remove(a)
    Next
     ListpkgUPGRADE.UnSelectAll
    Else
     For Each a In Listpkg.Selection
    txtpkg.text = txtpkg.text & Listpkg[a].Text & " "
    ' Listpkg.Remove(a)
    Next
     Listpkg.UnSelectAll
    Endif
    Endif
    Endif

End


Public Sub BTNADDPKGLIST_Click()
    Dim a As String
    Dim s As String
    If ListpkgINSTALLATI.Visible = True Then
      For Each a In ListpkgINSTALLATI.Selection
      s = ListpkgINSTALLATI[a].Text
      s = Scan(s, "* * *")[0]
      Shell "echo " & s & " >> " & User.Home &/ ".config/dnfdrake/log/rempkglist.txt" Wait
      'txtpkg.Text = User.Home &/ ".config/dnfdrake/log/rempkglist.txt"
      TXTPKGLISTNOME.Text = "Remove Package List"
    Next
     ListpkgINSTALLATI.UnSelectAll
    Else
      If ListpkgAVAILABLE.Visible = True Then
      For Each a In ListpkgAVAILABLE.Selection
      s = ListpkgAVAILABLE[a].Text
      s = Scan(s, "* * *")[0]
      Shell "echo " & s & " >> " & User.Home &/ ".config/dnfdrake/log/addpkglist.txt" Wait
      'txtpkg.Text = User.Home &/ ".config/dnfdrake/log/addpkglist.txt"
      TXTPKGLISTNOME.Text = "Install Package List"
    Next
    ListpkgAVAILABLE.UnSelectAll
    Else
     If ListpkgUPGRADE.Visible = True Then
      For Each a In ListpkgUPGRADE.Selection
      s = ListpkgUPGRADE[a].Text
      s = Scan(s, "* * *")[0]
      Shell "echo " & s & " >> " & User.Home &/ ".config/dnfdrake/log/updpkglist.txt" Wait
      'txtpkg.Text = User.Home &/ ".config/dnfdrake/log/updpkglist.txt"
      TXTPKGLISTNOME.Text = "Update Package List"
    Next
     ListpkgUPGRADE.UnSelectAll
   'IN MODALITÀ ONLINE LA SELEZIONE IN LISTA NON LAVORA
    ' Else
    '  For Each a In Listpkg.Selection
    ' txtpkg.text = txtpkg.text & Listpkg[a].Text & " "
    ' ' Listpkg.Remove(a)
    ' Next
    '  Listpkg.UnSelectAll
    Endif
    Endif
    Endif

  

End

Public Sub txtlang_MouseDown()

End

Public Sub Listpkg_DblClick()
  
   txtpkg.Text = ""
   If Listpkg.Count > 0 Then
   Listpkg.MoveCurrent
   Listpkg.Item.Selected = True
   txtpkg.Text = txtpkg.Text & " " & Listpkg.Item.Text
   Listpkg.UnselectAll
   ' Listpkg.Item.Selected = False
   ' Listpkg.Item.Delete  
   Endif
End

Public Sub ListpkgINSTALLATI_DblClick()
  Dim s As String
   txtpkg.Text = ""
   If ListpkgINSTALLATI.Count > 0 Then
   ListpkgINSTALLATI.MoveCurrent
   ListpkgINSTALLATI.Item.Selected = True
   S = ListpkgINSTALLATI.Item.Text
   s = Scan(s, "* * *")[0]
   txtpkg.Text = txtpkg.Text & " " & s
   ListpkgINSTALLATI.UnselectAll
   ' ListpkgINSTALLATI.Item.Delete  
   Endif

End

Public Sub ListpkgAVAILABLE_DblClick()
  Dim s As String
   txtpkg.Text = ""
   If ListpkgAVAILABLE.Count > 0 Then
   ListpkgAVAILABLE.MoveCurrent
   ListpkgAVAILABLE.Item.Selected = True
   S = ListpkgAVAILABLE.Item.Text
   s = Scan(s, "* * *")[0]
   txtpkg.Text = txtpkg.Text & " " & s
   ListpkgAVAILABLE.UnselectAll
   ' ListpkgAVAILABLE.Item.Selected = False
   ' ListpkgAVAILABLE.Item.Delete  
   Endif
End

Public Sub ListpkgUPGRADE_DblClick()

  Dim s As String
   txtpkg.Text = ""
   If ListpkgUPGRADE.Count > 0 Then
   ListpkgUPGRADE.MoveCurrent
   ListpkgUPGRADE.Item.Selected = True
   S = ListpkgUPGRADE.Item.Text
   s = Scan(s, "* * *")[0]
   txtpkg.Text = txtpkg.Text & " " & s
   ListpkgUPGRADE.UnselectAll
   ' ListpkgUPGRADE.Item.Selected = False
   ' ListpkgUPGRADE.Item.Delete  
   Endif
End

Public Sub ListpkgINSTALLATI_Menu()

 Dim s As String

   If ListpkgINSTALLATI.Count > 0 Then
      ListpkgINSTALLATI.MoveCurrent
      Try ListpkgINSTALLATI.Item.Selected = True
        If Error Then
        Else
            s = ListpkgINSTALLATI.Item.Text
            ListpkgINSTALLATI.Item.Selected = False
        Endif 
   Endif
   
  If $INFOENABLED = 0 Then
     If s = ""
       Else     
          TXTINFOBOX.Visible = True
          Wait 0.5
          Shell "dnf info " & s Wait To $INFOTEXT
          TXTINFOBOX.Text = $INFOTEXT    
          TXTINFOBOX.SetFocus
          $INFOENABLED = 1
     Endif   
  Endif
End

Public Sub ListpkgAVAILABLE_Menu()

 Dim s As String

   If ListpkgAVAILABLE.Count > 0 Then
      ListpkgAVAILABLE.MoveCurrent
      Try ListpkgAVAILABLE.Item.Selected = True
        If Error Then
        Else
            s = ListpkgAVAILABLE.Item.Text
            ListpkgAVAILABLE.Item.Selected = False
        Endif 
   Endif
   
  If $INFOENABLED = 0 Then
     If s = ""
       Else   
          TXTINFOBOX.Visible = True
          Wait 0.5
          Shell "dnf info " & s Wait To $INFOTEXT
          TXTINFOBOX.Text = $INFOTEXT    
          TXTINFOBOX.SetFocus
          $INFOENABLED = 1
     Endif 
  Endif
End

Public Sub ListpkgUPGRADE_Menu()


 Dim s As String

   If ListpkgUPGRADE.Count > 0 Then
      ListpkgUPGRADE.MoveCurrent
      Try ListpkgUPGRADE.Item.Selected = True
        If Error Then
        Else
            s = ListpkgUPGRADE.Item.Text
            ListpkgUPGRADE.Item.Selected = False
        Endif
   Endif
   
  If $INFOENABLED = 0 Then
     If s = ""
       Else       
          TXTINFOBOX.Visible = True
          Wait 0.5
          Shell "dnf info " & s Wait To $INFOTEXT
          TXTINFOBOX.Text = $INFOTEXT    
          TXTINFOBOX.SetFocus
          $INFOENABLED = 1
     Endif      
  Endif
End
Public Sub ListpkgNODEPS_Menu()

  
 Dim s As String

   If ListpkgNODEPS.Count > 0 Then
      ListpkgNODEPS.MoveCurrent
      Try ListpkgNODEPS.Item.Selected = True
        If Error Then
        Else
            s = ListpkgNODEPS.Item.Text
            ListpkgNODEPS.Item.Selected = False
        Endif
   Endif
   
  If $INFOENABLED = 0 Then
     If s = ""
       Else       
          TXTINFOBOX.Visible = True
          Wait 0.5
          Shell "dnf info " & s Wait To $INFOTEXT
          TXTINFOBOX.Text = $INFOTEXT    
          TXTINFOBOX.SetFocus
          $INFOENABLED = 1
     Endif      
  Endif
  
End

Public Sub ListpkgNODEPS_Select()
  Dim s As String
   If ListpkgNODEPS.Count > 0 Then
      txtpkg.Text = ""
      ListpkgNODEPS.MoveCurrent
      ListpkgNODEPS.Item.Selected = True
      S = ListpkgNODEPS.Item.Text
      txtpkg.Text = s
   Endif
End

Public Sub TXTINFOBOX_LostFocus()

  TXTINFOBOX.Text = "Loading..."
  If TXTINFOBOX.Visible = True Then
    TXTINFOBOX.Visible = False
    $INFOENABLED = 0
  Endif
  
End

Public Sub btnstop_Click()
$ListpkgCK = 0
$ListpkgWR = 0
$CHKERROR = 0
If $MEMOCOMMAND = "UPDATESNODEPS" Or If $MEMOCOMMAND = "INSTALLNODEPS" Then
   $MEMOCOMMAND = ""
Endif
Print #$hProcess, Chr$(3);
Me.Mouse = Mouse.Default
End

Public Sub Btndownload_Click()
   Dim a As String
   Dim s As String
   Dim spkg As String
   spkg = ""
'APRE LA FINESTRA PER SELEZIONARE DOVE SCARICARE IL PACCHETTO 
   Dialog.Title = $DIALOGDIRTITLE
   Dialog.Path = $pathdir                       'IMPOSTA LA FINESTRA IN HOME UTENTE
    If Dialog.SelectDirectory() Then 
    Else
        $pathdir = Replace(Dialog.Path, " ", Chr$(92) & " ")                     ' serve agestire percorsi con gli spazi
        txtConsole.Text = " "
        Print #$hProcess, "cd " & $pathdir 
'************************************************************* 
        If ListpkgINSTALLATI.Visible = False And ListpkgAVAILABLE.Visible = False And ListpkgUPGRADE.Visible = False And If Listpkg.Visible = False Then
              If txtpkg.text = "" Then
                Message.Info($SELECTPKG, "OK")
              Else
                txtConsole.Text = ""
                Print #$hProcess, "dnf download " & txtpkg.Text & $VERBOSE & gb.NewLine;
                PICLOGODISTRO.Visible = False  
                If $SECUREMODE = "SECURE" Then
                   FPROGRESSWAIT.Show
                Endif 
              Endif
        Else   
           If $OFFLINE = 1 Then
                 If ListpkgINSTALLATI.Visible = True 
                         For Each a In ListpkgINSTALLATI.Selection
                           s = ListpkgINSTALLATI[a].Text
                           s = Scan(s, "* * *")[0]
                           spkg = spkg & " " & s 
                            ListpkgINSTALLATI.Remove(a)
                         Next
                           ListpkgINSTALLATI.UnSelectAll
                              Btnclear_Click
                           If Btnexp2.Text = "EXP2" Then
                             Btnexp2_Click  
                           Endif
                           If spkg = "" Then
                               Message.Info($SELECTPKG, "OK")
                           Else
                              Print #$hProcess, "dnf download " & spkg & $VERBOSE & gb.NewLine;
                              PICLOGODISTRO.Visible = False  
                              If $SECUREMODE = "SECURE" Then
                                 FPROGRESSWAIT.Show
                              Endif 
                           Endif
                 Endif
                 If ListpkgAVAILABLE.Visible = True 
                         For Each a In ListpkgAVAILABLE.Selection
                           s = ListpkgAVAILABLE[a].Text
                           s = Scan(s, "* * *")[0]
                           spkg = spkg & " " & s 
                            ListpkgAVAILABLE.Remove(a)
                         Next
                           ListpkgAVAILABLE.UnSelectAll
                           Btnclear_Click
                           If Btnexp2.Text = "EXP2" Then
                              Btnexp2_Click  
                           Endif
                           If spkg = "" Then
                               Message.Info($SELECTPKG, "OK")
                           Else
                              Print #$hProcess, "dnf download " & spkg & $VERBOSE & gb.NewLine;
                              PICLOGODISTRO.Visible = False  
                              If $SECUREMODE = "SECURE" Then
                                 FPROGRESSWAIT.Show
                              Endif
                           Endif
                 Endif   
                  If ListpkgUPGRADE.Visible = True 
                         For Each a In ListpkgUPGRADE.Selection
                           s = ListpkgUPGRADE[a].Text
                           s = Scan(s, "* * *")[0]
                           spkg = spkg & " " & s 
                            ListpkgUPGRADE.Remove(a) 
                         Next
                           ListpkgUPGRADE.UnSelectAll
                           Btnclear_Click
                           If Btnexp2.Text = "EXP2" Then
                               Btnexp2_Click  
                           Endif
                           If spkg = "" Then
                               Message.Info($SELECTPKG, "OK")
                           Else
                              Print #$hProcess, "dnf download " & spkg & $VERBOSE & gb.NewLine;
                              PICLOGODISTRO.Visible = False  
                              If $SECUREMODE = "SECURE" Then
                                 FPROGRESSWAIT.Show
                              Endif
                           Endif
                  Endif
          Else
                  If Listpkg.Visible = True Then
                      For Each a In Listpkg.Selection
                        s = Listpkg[a].Text
                       ' s = Scan(s, "* * *")[0]
                        spkg = spkg & " " & s 
                        Listpkg.Remove(a)
                      Next
                        Listpkg.UnSelectAll
                      Btnclear_Click
                        If Btnexp2.Text = "EXP2" Then
                          Btnexp2_Click  
                        Endif
                        If spkg = "" Then
                           Message.Info($SELECTPKG, "OK")
                        Else
                          Print #$hProcess, "dnf download " & spkg & $VERBOSE & gb.NewLine;
                          PICLOGODISTRO.Visible = False  
                          If $SECUREMODE = "SECURE" Then
                             FPROGRESSWAIT.Show
                          Endif
                        Endif 
                  Endif
          Endif    
      Endif
                  Btnclear_Click
                  If Btnexp2.Text = "EXP2" Then
                     Btnexp2_Click  
                  Endif
  Endif 
End

Public Sub BtnCFG_Click()

    FCONFIG.Show

End

Public Sub Btnpathfile_Click()
'CODICE PREMODIFICA**************************************************************
' txtpkg.Text = ""
' Btnclear_Click
' Dim $PATHFILE As String
' Dialog.Title = $DIALOGFILETITLE
' Dialog.Filter = ["*.rpm", "Package", "*.txt", "List Package", "*", "All files"]
' Dialog.Path = user.home
'   If Dialog.OpenFile(True) Then Return
'   For Each $PATHFILE In Dialog.Paths
'    txtpkg.Text = txtpkg.Text & " " & $PATHFILE
'   Next
'   If txtpkg.Length > 1000 Then
'     Message.Info("You seem to be installing many packages at once, this can cause errors! I recommend you create a list and install with that!", "OK")
'   Endif
' Catch
'   Message.Info(Error.Text)
'*******************************************************************************
txtpkg.Text = ""
Btnclear_Click
Dim $PATHFILE As String
Dim $ITEMLISTA As String
Dim $TXTLISTA As String[]
Dialog.Title = $DIALOGFILETITLE
Dialog.Filter = ["*.rpm", "Package", "*.txt", "List Package", "*", "All files"]
Dialog.Path = $pathdir
  If Dialog.OpenFile(True) Then Return
  For Each $PATHFILE In Dialog.Paths
   txtpkg.Text = txtpkg.Text & " " & Replace$($PATHFILE, " ", Chr$(92) & " ")
   Next 
      If txtpkg.Length > 1000 Then
        Shell "echo " & "" & "> " & User.Home &/ ".config/dnfdrake/log/pkglist.txt" Wait 
        $TXTLISTA = Split(txtpkg.Text, " ")
        txtpkg.Text = ""
        Message.Info("It seems that you are installing many packages at the same time, this can cause errors, to avoid this DnfDrake has created a temporary list for installation!", "OK")
    For Each $ITEMLISTA In $TXTLISTA 
      Shell "echo " & Replace$($ITEMLISTA, " ", Chr$(92) & " ") & " > > " & User.Home &/ ".config / dnfdrake / log / pkglist.txt " Wait
    Next 
    txtpkg.Text = User.Home &/ ".config/dnfdrake/log/pkglist.txt" 
  Endif
Catch
  Message.Info("Si è verificato un errore, Riprovare", "Ok")
End

Public Sub Btnpathpkglist_Click()
 
 Dim $PATHFILE As String

 txtpkg.Text = ""
 Btnclear_Click
   If Exist(User.Home &/ ".config/dnfdrake/log/pkglist.txt") Then
     Shell "echo  > " & User.Home &/ ".config/dnfdrake/log/pkglist.txt" Wait
   Endif
   Dialog.Title = $DIALOGFILETITLE
   Dialog.Filter = ["*.rpm", "Package", "*", "All files"]
   Dialog.Path = $pathdir
   If Dialog.OpenFile(True) Then Return
      For Each $PATHFILE In Dialog.Paths
         Shell "echo " & Replace$($PATHFILE, " ", Chr$(92) & " ") & ">> " & User.Home &/ ".config/dnfdrake/log/pkglist.txt" Wait
      Next
  
  Dialog.Path = $pathdir                   'IMPOSTA LA FINESTRA IN CUI SALVARE LA LISTA' 
  Dialog.Filter = ["*.txt", "Text Files"]
    If Dialog.SaveFile() Then Return
      Fmain.$pathdir = Replace(Dialog.Path, " ", Chr$(92) & " ")                     ' serve agestire percorsi con gli spazi
      Shell "cp " & User.Home &/ ".config/dnfdrake/log/pkglist.txt " & Dialog.Path Wait 
  
Catch
  Message.Info("Si è verificato un errore, Riprovare", "Ok")
 
End

Public Sub Btncleartxtpkg_Click()

  txtpkg.Text = ""
  
End



' Public Sub BTNPICKER_Click()
' 
'    If Btnexp2.Text = "EXP2" Then
'    Btnexp2_Click  
'    Endif
'    txtConsole.Text = ""
'   $MEMOCOMMAND = "dnf repolist"
'   Print #$hProcess, "om-repo-picker " & gb.NewLine;
'    
'   End

Public Sub TXTSTATUS_MouseDown()
End


Public Sub BTNSELECTALL_Click()
If ListpkgINSTALLATI.Visible = True Then
  ListpkgINSTALLATI.SelectAll
  Else
    If ListpkgAVAILABLE.Visible = True Then
      ListpkgAVAILABLE.SelectAll
      Else
        If ListpkgUPGRADE.Visible = True Then
          ListpkgUPGRADE.SelectAll
          Else
             Listpkg.SelectAll
        Endif
    Endif
Endif

End

Public Sub BTNUNSELECTALL_Click()
  If ListpkgINSTALLATI.Visible = True Then
  ListpkgINSTALLATI.UnSelectAll
  Else
    If ListpkgAVAILABLE.Visible = True Then
      ListpkgAVAILABLE.UnSelectAll
      Else
        If ListpkgUPGRADE.Visible = True Then
          ListpkgUPGRADE.UnSelectAll
          Else
             Listpkg.UnselectAll
        Endif
    Endif
Endif
  
End



Public Sub BTNDOWNDGRADE_Click()

    Dim a As String
    Dim s As String
    Dim spkg As String
    spkg = ""
'VERIFICA NUMERO DI PACCHETTI SELEZIONATI*************************************    
    If Val(Str(ListpkgINSTALLATI.Selection.Count)) > 10 Then
    Message.Info("It seems that you are select many packages at the same time, this can cause errors, to avoid this DnfDrake has created a temporary list for downgrade!", "OK")
    BTNADDPKGLIST_Click
    Endif 
'*****************************************************************************
    If TXTPKGLISTNOME.Visible = True And If TXTPKGLISTNOME.Text = "Remove Package List" Then
      Print #$hProcess, $DOWNGRADE & "$(cat " & User.Home &/ ".config/dnfdrake/log/rempkglist.txt" & " )" & $VERBOSE & gb.NewLine;
      Btnclear_Click
      FRUNSHOW
    Else  
          If Listpkg.Visible = False And If ListpkgINSTALLATI.Visible = False 
               If txtpkg.text = "" Then
                   Message.Info($SELECTPKG, "OK")
               Else
                 If Right(txtpkg.Text, 4) = ".txt" Then '*************Verifica se esiste un elenco di pacchetti da installare 
                    Print #$hProcess, $DOWNGRADE & "$(cat " & txtpkg.Text & " )" & $VERBOSE & gb.NewLine;
                    FRUNSHOW
                        Else    
                     Btnclear_Click
                        If Btnexp2.Text = "EXP2" Then
                            Btnexp2_Click  
                        Endif   
                     txtConsole.Text = ""
                     Print #$hProcess, $DOWNGRADE & txtpkg.Text & $VERBOSE & gb.NewLine;
                     FRUNSHOW
                 Endif     
              Endif
          Endif
          
          If ListpkgAVAILABLE.Visible = True Or If ListpkgUPGRADE.Visible = True Then
              Message.Info($SELECTPKG, "OK")
          Else    
       
                 If ListpkgINSTALLATI.Visible = True 
                         For Each a In ListpkgINSTALLATI.Selection
                           s = ListpkgINSTALLATI[a].Text
                           s = Scan(s, "* * *")[0]
                           spkg = spkg & " " & s 
                            ListpkgINSTALLATI.Remove(a)
                         Next
                         If spkg = "" Then
                            Message.Info($SELECTPKG, "OK")
                         Else
                             ListpkgINSTALLATI.UnSelectAll
                             Btnclear_Click
                             If Btnexp2.Text = "EXP2" Then
                             Btnexp2_Click  
                             Endif
                            Print #$hProcess, $DOWNGRADE & spkg & $VERBOSE & gb.NewLine;
                            FRUNSHOW
                         Endif
                  Endif
             If $OFFLINE = 0 Then 
                   If Listpkg.Visible = True Then
                     If Cmbtipo.index = 1 Or If Cmbtipo.index = 0
                        For Each a In Listpkg.Selection
                          s = Listpkg[a].Text
                         ' s = Scan(s, "* * *")[0]
                          spkg = spkg & " " & s 
                          Listpkg.Remove(a)
                        Next
                        If spkg = "" Then
                           Message.Info($SELECTPKG, "OK")
                        Else
                           Listpkg.UnSelectAll
                           Btnclear_Click
                           If Btnexp2.Text = "EXP2" Then
                           Btnexp2_Click  
                           Endif
                           Print #$hProcess, $DOWNGRADE & spkg & $VERBOSE & gb.NewLine;
                           FRUNSHOW
                        Endif
                     Endif   
                   Endif
             Endif
        Endif
   Endif   
End

Public Sub BTNCUSTOM_Click()

  Btnclear_Click
   If Btnexp2.Text = "EXP2" Then
   Btnexp2_Click  
   Endif
   
   Print #$hProcess, $CUSTOMCMD & txtpkg.Text & gb.NewLine;
   txtConsole.Text = ""
   PICLOGODISTRO.Visible = False
  

End

Public Sub BTNEXTRA_Click()

  Btnclear_Click
  FEXTRA.Show

End


Public Sub BTNTABINSTALLED_Click()
ListpkgINSTALLATI.Visible = True
ListpkgAVAILABLE.Visible = False
ListpkgUPGRADE.Visible = False 
 ' If $COLORTEXT = "color"
    CORNICE.Background = &H2A9A4F&
 'Endif  
  BTNINSTALVIEW
If ListpkgINSTALLATI.mode <> 0 Then  
   If CHKNODEPS.Value = True Then
      ListpkgINSTALLATI.Mode = 1
   Else    
      ListpkgINSTALLATI.Mode = 2
   Endif
Endif

End

Public Sub BTNTABAVIABLE_Click()
ListpkgINSTALLATI.Visible = False
ListpkgAVAILABLE.Visible = True
ListpkgUPGRADE.Visible = False
 ' If $COLORTEXT = "color"
    CORNICE.Background = &HE0703F&
 ' Endif  
  BTNAVAILABLEVIEW
If ListpkgAVAILABLE.Mode <> 0 Then
   If CHKNODEPS.Value = True Then
      ListpkgAVAILABLE.Mode = 1
   Else    
      ListpkgAVAILABLE.Mode = 2
   Endif
Endif

End


Public Sub BTNTABUPDATE_Click()
ListpkgINSTALLATI.Visible = False
ListpkgAVAILABLE.Visible = False
ListpkgUPGRADE.Visible = True
  'If $COLORTEXT = "color"
    CORNICE.Background = &H257ED0&
  'Endif 
  BTNUPDATEVIEW
If ListpkgUPGRADE.Mode <> 0 Then  
   If CHKNODEPS.Value = True Then
      ListpkgUPGRADE.Mode = 1
   Else    
      ListpkgUPGRADE.Mode = 2
   Endif
Endif
End


Public Sub ListpkgINSTALLATI_Click()
End

Public Sub Listpkg_Click()
End

Public Sub ListpkgAVAILABLE_Click()
End




Public Sub CHKoffline_Click()

  

End

Public Sub TimerUPLISTE_Timer()
 FLOADLISTE.Show
'GESTIONE BLOCCHI SPERIMENTALE DA PROVARE 
 'If $SECUREMODE = "SECURE" Then
   ' TimerSECUREDOG.Enabled = True
 'Endif
 '**************************************
 TimerUPLISTE.Enabled = False 
' CHKSUSPEND.Enabled = True

End

Public Sub ListpkgUPGRADE_Click()
End




Public Sub BTNVERSLOCK_Click()

     Dim a As String
     Dim s As String
     Dim spkg As String
     spkg = ""
    ' Btnclear_Click
 If CMBVERSLOCK.index = 0 Then                      'List
          Btnclear_Click
          If Btnexp2.Text = "EXP2" Then
            Btnexp2_Click 
          Endif
          Print #$hProcess, "dnf versionlock list " & $VERBOSE & gb.NewLine; 
          PICLOGODISTRO.Visible = False  
 Endif
'**************************************************************************

If CMBVERSLOCK.index = 1 Then                      'Add

 If Listpkg.Visible = False And If ListpkgINSTALLATI.Visible = False And If ListpkgAVAILABLE.Visible = False And If ListpkgUPGRADE.Visible = False
      If txtpkg.text = "" Then
         Message.Info($SELECTPKG, "OK")
      Else
        If Btnexp2.Text = "EXP2" Then
          Btnexp2_Click 
        Endif
          spkg = txtpkg.Text
          txtpkg.Text = ""
           Btnclear_Click
           Print #$hProcess, "sudo dnf versionlock add " & spkg & $VERBOSE & gb.NewLine;
           PICLOGODISTRO.Visible = False   
      Endif
 Else   
      If $OFFLINE = 0 Then
          If Listpkg.Visible = True 
              For Each a In Listpkg.Selection
                s = Listpkg[a].Text
                's = Scan(s, "* * *")[0]
                spkg = spkg & " " & s 
                 Listpkg.Remove(a)
              Next
                Listpkg.UnSelectAll
                If spkg = "" Then
                      Message.Info($SELECTPKG, "OK")
                    Else
                      If Btnexp2.Text = "EXP2" Then
                        Btnexp2_Click  
                      Endif
                      Btnclear_Click
                      TABHIDE
                      Listpkg.Visible = False
                    Print #$hProcess, "sudo dnf versionlock add " & spkg & $VERBOSE & gb.NewLine; 
                    PICLOGODISTRO.Visible = False  
                Endif
          Endif
     Else     
          If ListpkgINSTALLATI.Visible = True 
              For Each a In ListpkgINSTALLATI.Selection
                s = ListpkgINSTALLATI[a].Text
                s = Scan(s, "* * *")[0]
                spkg = spkg & " " & s 
                 ListpkgINSTALLATI.Remove(a)
              Next
                ListpkgINSTALLATI.UnSelectAll
                If spkg = "" Then
                      Message.Info($SELECTPKG, "OK")
                    Else
                      If Btnexp2.Text = "EXP2" Then
                        Btnexp2_Click  
                      Endif
                      Btnclear_Click
                      TABHIDE
                      Listpkg.Visible = False
                    Print #$hProcess, "sudo dnf versionlock add " & spkg & $VERBOSE & gb.NewLine; 
                    PICLOGODISTRO.Visible = False   
                Endif
          Endif
          
           If ListpkgAVAILABLE.Visible = True 
              For Each a In ListpkgAVAILABLE.Selection
                s = ListpkgAVAILABLE[a].Text
                s = Scan(s, "* * *")[0]
                spkg = spkg & " " & s 
                 ListpkgAVAILABLE.Remove(a)
              Next
                ListpkgAVAILABLE.UnSelectAll
                If spkg = "" Then
                      Message.Info($SELECTPKG, "OK")
                    Else
                      If Btnexp2.Text = "EXP2" Then
                        Btnexp2_Click  
                      Endif
                      Btnclear_Click
                      TABHIDE
                      Listpkg.Visible = False
                    Print #$hProcess, "sudo dnf versionlock add " & spkg & $VERBOSE & gb.NewLine; 
                    PICLOGODISTRO.Visible = False   
                Endif
          Endif
          
          If ListpkgUPGRADE.Visible = True 
              For Each a In ListpkgUPGRADE.Selection
                s = ListpkgUPGRADE[a].Text
                s = Scan(s, "* * *")[0]
                spkg = spkg & " " & s 
                 ListpkgUPGRADE.Remove(a)
              Next
                ListpkgUPGRADE.UnSelectAll
                If spkg = "" Then
                      Message.Info($SELECTPKG, "OK")
                    Else
                      If Btnexp2.Text = "EXP2" Then
                        Btnexp2_Click  
                      Endif
                      Btnclear_Click
                      TABHIDE
                      Listpkg.Visible = False
                    Print #$hProcess, "sudo dnf versionlock add " & spkg & $VERBOSE & gb.NewLine; 
                    PICLOGODISTRO.Visible = False   
          Endif
      Endif

    Endif

  Endif

Endif

'**************************************************************************
If CMBVERSLOCK.index = 2 Then                      'Delete

 If Listpkg.Visible = False And If ListpkgINSTALLATI.Visible = False And If ListpkgAVAILABLE.Visible = False And If ListpkgUPGRADE.Visible = False
      If txtpkg.text = "" Then
         Message.Info($SELECTPKG, "OK")
      Else
        If Btnexp2.Text = "EXP2" Then
          Btnexp2_Click 
        Endif
          spkg = txtpkg.Text
          txtpkg.Text = ""
           Btnclear_Click
           Print #$hProcess, "sudo dnf versionlock delete " & spkg & $VERBOSE & gb.NewLine;
           PICLOGODISTRO.Visible = False    
      Endif
 Else   
      If $OFFLINE = 0 Then
          If Listpkg.Visible = True 
              For Each a In Listpkg.Selection
                s = Listpkg[a].Text
                's = Scan(s, "* * *")[0]
                spkg = spkg & " " & s 
                 Listpkg.Remove(a)
              Next
                Listpkg.UnSelectAll
                If spkg = "" Then
                      Message.Info($SELECTPKG, "OK")
                    Else
                      If Btnexp2.Text = "EXP2" Then
                        Btnexp2_Click  
                      Endif
                      Btnclear_Click
                      TABHIDE
                      Listpkg.Visible = False
                    Print #$hProcess, "sudo dnf versionlock delete " & spkg & $VERBOSE & gb.NewLine; 
                    PICLOGODISTRO.Visible = False   
                Endif
          Endif
     Else     
          If ListpkgINSTALLATI.Visible = True 
              For Each a In ListpkgINSTALLATI.Selection
                s = ListpkgINSTALLATI[a].Text
                s = Scan(s, "* * *")[0]
                spkg = spkg & " " & s 
                 ListpkgINSTALLATI.Remove(a)
              Next
                ListpkgINSTALLATI.UnSelectAll
                If spkg = "" Then
                      Message.Info($SELECTPKG, "OK")
                    Else
                      If Btnexp2.Text = "EXP2" Then
                        Btnexp2_Click  
                      Endif
                      Btnclear_Click
                      TABHIDE
                      Listpkg.Visible = False
                    Print #$hProcess, "sudo dnf versionlock delete " & spkg & $VERBOSE & gb.NewLine; 
                    PICLOGODISTRO.Visible = False   
                Endif
          Endif
          
           If ListpkgAVAILABLE.Visible = True 
              For Each a In ListpkgAVAILABLE.Selection
                s = ListpkgAVAILABLE[a].Text
                s = Scan(s, "* * *")[0]
                spkg = spkg & " " & s 
                 ListpkgAVAILABLE.Remove(a)
              Next
                ListpkgAVAILABLE.UnSelectAll
                If spkg = "" Then
                      Message.Info($SELECTPKG, "OK")
                    Else
                      If Btnexp2.Text = "EXP2" Then
                        Btnexp2_Click  
                      Endif
                      Btnclear_Click
                      TABHIDE
                      Listpkg.Visible = False
                    Print #$hProcess, "sudo dnf versionlock delete " & spkg & $VERBOSE & gb.NewLine; 
                    PICLOGODISTRO.Visible = False  
                Endif
          Endif
          
          If ListpkgUPGRADE.Visible = True 
              For Each a In ListpkgUPGRADE.Selection
                s = ListpkgUPGRADE[a].Text
                s = Scan(s, "* * *")[0]
                spkg = spkg & " " & s 
                 ListpkgUPGRADE.Remove(a)
              Next
                ListpkgUPGRADE.UnSelectAll
                If spkg = "" Then
                      Message.Info($SELECTPKG, "OK")
                    Else
                      If Btnexp2.Text = "EXP2" Then
                        Btnexp2_Click  
                      Endif
                      Btnclear_Click
                      TABHIDE
                      Listpkg.Visible = False
                    Print #$hProcess, "sudo dnf versionlock delete " & spkg & $VERBOSE & gb.NewLine; 
                    PICLOGODISTRO.Visible = False   
          Endif
      Endif

    Endif

  Endif

Endif

 
 If CMBVERSLOCK.index = 3 Then                      'Clear
          Btnclear_Click
          If Btnexp2.Text = "EXP2" Then
          Btnexp2_Click 
          Endif
          Print #$hProcess, "sudo dnf versionlock clear " & $VERBOSE & gb.NewLine; 
          PICLOGODISTRO.Visible = False   
  Endif
 
End

Public Sub CMBVERSLOCK_Click()

  

End

Public Sub BTNDISTUPDATE_Click()
   'DISABILITAZIONE SUSPEND***************************
   If $WAITSUSPEND = 0 Then
        If $AUTOSUSPEND = 1 Then 
          Btnclear_Click
          txtConsole.Text = ""
          If $SECUREMODE = "SECURE" Then
            Fmain.Enabled = False
          Endif 
          $MEMOCOMMAND = "DISTROSYNCWAIT"
          $WAITSUSPEND = 1
          Print #$hProcess, "sudo systemctl mask sleep.target suspend.target hibernate.target hybrid-sleep.target" & gb.NewLine;  
        Else 
          DSTRSYNC
        Endif   
   Else 
     DSTRSYNC ' SOSTITUISCE IL CODICE PER EVITARE DI RIPETERLO *********************************
  Endif
  PICLOGODISTRO.Visible = False  
End

Public Sub BTNPICKER_Click()

   Btnclear_Click
   Me.Mouse = Mouse.Wait
   If $SECUREMODE = "SECURE" Then
     Fmain.Enabled = False
   Endif
   If Btnexp2.Text = "EXP2" Then
   Btnexp2_Click  
   Endif
   txtConsole.Text = ""
  $MEMOCOMMAND = "dnf repolist"
  Print #$hProcess, "om-repo-picker " & gb.NewLine;


End

Public Sub BTNREINSTALL_Click()

    Dim a As String
    Dim s As String
    Dim spkg As String
    spkg = ""
'VERIFICA NUMERO DI PACCHETTI SELEZIONATI*************************************    
    If Val(Str(ListpkgINSTALLATI.Selection.Count)) > 10 Then
    Message.Info("It seems that you are select many packages at the same time, this can cause errors, to avoid this DnfDrake has created a temporary list for reinstallation!", "OK")
    BTNADDPKGLIST_Click
    Endif 
'*****************************************************************************
    If TXTPKGLISTNOME.Visible = True And If TXTPKGLISTNOME.Text = "Remove Package List" Then
      Print #$hProcess, $REINSTALL & "$(cat " & User.Home &/ ".config/dnfdrake/log/rempkglist.txt" & " )" & $VERBOSE & gb.NewLine;
      Btnclear_Click
      FRUNSHOW
    Else  
          If Listpkg.Visible = False And If ListpkgINSTALLATI.Visible = False 
               If txtpkg.text = "" Then
                   Message.Info($SELECTPKG, "OK")
               Else
                  If Right(txtpkg.Text, 4) = ".txt" Then '*************Verifica se esiste un elenco di pacchetti da installare 
                    Print #$hProcess, $REINSTALL & "$(cat " & txtpkg.Text & " )" & $VERBOSE & gb.NewLine;
                    FRUNSHOW
                        Else                                  '*************Se non c'è elenco fa la solita installazione
                     Btnclear_Click
                        If Btnexp2.Text = "EXP2" Then
                            Btnexp2_Click  
                        Endif   
                     txtConsole.Text = ""
                     ' Print #$hProcess, $REINSTALL & txtpkg.Text & gb.NewLine; 'comando ok riabilitare dopo il test
                     Me.Mouse = Mouse.Wait 
                     Print #$hProcess, $REINSTALL & txtpkg.Text & $VERBOSE & gb.NewLine; 
                     FRUNSHOW
                 Endif     
              Endif
          Endif
          
          If ListpkgAVAILABLE.Visible = True Or If ListpkgUPGRADE.Visible = True Then
              Message.Info($SELECTPKG, "OK")
          Else    
       
                 If ListpkgINSTALLATI.Visible = True 
                         For Each a In ListpkgINSTALLATI.Selection
                           s = ListpkgINSTALLATI[a].Text
                           s = Scan(s, "* * *")[0]
                           spkg = spkg & " " & s 
                            ListpkgINSTALLATI.Remove(a)
                         Next
                         If spkg = "" Then
                            Message.Info($SELECTPKG, "OK")
                         Else
                             ListpkgINSTALLATI.UnSelectAll
                             Btnclear_Click
                             If Btnexp2.Text = "EXP2" Then
                             Btnexp2_Click  
                             Endif
                             Me.Mouse = Mouse.Wait 
                            Print #$hProcess, $REINSTALL & spkg & $VERBOSE & gb.NewLine;
                            FRUNSHOW
                         Endif
                  Endif
             If $OFFLINE = 0 Then 
                   If Listpkg.Visible = True Then
                     If Cmbtipo.index = 1 Or If Cmbtipo.index = 0
                        For Each a In Listpkg.Selection
                          s = Listpkg[a].Text
                         ' s = Scan(s, "* * *")[0]
                          spkg = spkg & " " & s 
                          Listpkg.Remove(a)
                        Next
                        If spkg = "" Then
                           Message.Info($SELECTPKG, "OK")
                        Else
                           Listpkg.UnSelectAll
                           Btnclear_Click
                           If Btnexp2.Text = "EXP2" Then
                           Btnexp2_Click  
                           Endif
                            Me.Mouse = Mouse.Wait 
                           Print #$hProcess, $REINSTALL & spkg & $VERBOSE & gb.NewLine; 
                           FRUNSHOW
                        Endif
                     Endif   
                   Endif
             Endif
        Endif
    Endif        
End

Public Sub BTNVIEWLOG_Click()
   Dim $PATHFILELOG As String

   Btnclear_Click
 'APRE LA FINESTRA PER SELEZIONARE IL LOG
   Btnclear_Click
   Dialog.Title = $DIALOGDIRTITLE
   Dialog.Path = $PATHLOG                       'IMPOSTA LA FINESTRA NELLA DIR DEI LOG
   'Dialog.Path = User.Home &/ ".config/dnfdrake/log" 
   Dialog.Filter = ["*.log", "*", "All files"]
   
   If Dialog.OpenFile(True) Then Return
   For Each $PATHFILELOG In Dialog.Paths
     $PRINTLOG = 1
     ' $PATHFILELOG = Replace(Dialog.Path, " ", Chr$(92) & " ") ' serve agestire percorsi con gli spazi
   Print #$hProcess, "cat " & $PATHFILELOG 
   PICLOGODISTRO.Visible = False  
   Next
Catch
  Message.Info(Error.Text)

'************************************************************* 
End


Public Sub BTNREPLAY_Click()
  Btnclear_Click
  If Right(txtpkg.Text, 4) = ".txt" Then '*************Verifica se esiste un elenco di pacchetti da installare 
     Print #$hProcess, "cat " & txtpkg.Text & gb.NewLine;
     PICLOGODISTRO.Visible = False  
  Else 
      Btnclear_Click
      $PRINTLOG = 1
      Print #$hProcess, "cat " & $PATHLOG & "/last.log"
      PICLOGODISTRO.Visible = False  
  Endif
End
Public Sub DATATIME()
 
  ' Dim $GIORNO As String
  ' Dim $MESE As String
  ' Dim $ANNO As String
  ' Dim $TIME As String
  ' $GIORNO = Day(Now)
  ' $MESE = Month(Now)
  ' $ANNO = Year(Now)
  ' $DATATIME = Now
  ' $DATATIME = Left($DATATIME, 16) 'Left(Now, 19)
  ' $TIME = Replace(Right($DATATIME, 5), ":", "")
  ' $DATATIME = $ANNO & $MESE & $GIORNO & "-" & $TIME
  $DATATIME = Replace$(Replace$(Replace$(Left(Str$(Now), 16), "/", ""), " ", "-"), ":", "")
  
End


Public Sub BTNUNLOCK_Click()

FSINO.Visible = True  
Fmain.Enabled = False
BTNUNLOCK.Visible = False

End



Public Sub BTNDNFCLEAN_Click()

  Btnclear_Click
 
  If Btnexp2.Text = "EXP2" Then
     Btnexp2_Click  
  Endif

  txtConsole.Text = ""
  $MEMOCOMMAND = "dnf repolist"
  Print #$hProcess, "sudo dnf clean all; dnf clean all;" & gb.NewLine; 
   PICLOGODISTRO.Visible = False  
  
End


Public Sub PICBTNDISTUPDATE_MouseDown()
  BTNDISTUPDATE_Click
End
Public Sub BTNPKGLISTVIEW_Click()

  If TXTPKGLISTNOME.Text = "None" Then
    Message.Info("No List Package Found!", "OK")
    Else 
    FTEMPPKGLIST.Show
    ' Else If TXTPKGLISTNOME.Text = "Remove Package List"
    '   Print #$hProcess, "cat " & User.Home &/ ".config/dnfdrake/log/rempkglist.txt " & gb.NewLine;
    ' Else If TXTPKGLISTNOME.Text = "Install Package List"
    '   Print #$hProcess, "cat " & User.Home &/ ".config/dnfdrake/log/addpkglist.txt" & gb.NewLine;
    ' Else If TXTPKGLISTNOME.Text = "Update Package List"
    '   Print #$hProcess, "cat " & User.Home &/ ".config/dnfdrake/log/updpkglist.txt" & gb.NewLine;  
  Endif
     
End
Public Sub CORNICE_MouseDown()
End
Public Sub TXTPKGLISTNOME_KeyPress()
End
Public Sub BTNPKGLISTCLEAN_Click()
  TMPLISTCLEAN
  TXTPKGLISTNOME.Text = "None"
End

Public Sub BTNEXCLUDE_Click()
     Dim a As String
     Dim s As String
     Dim spkg As String
     spkg = ""
     
'MOSTRA I PACCHETTI ESCLUSI************************************************
 If CMBVERSLOCK.index = 0 Then                      'List
     FEXCLUDELIST.SHOW
  Endif

'AGGIUNGE PACCHETTI AGLI ESCLUSI************************************************
If CMBVERSLOCK.index = 1 Then                      'Add
 EXCLUDETEST 
 $MEMOCOMMAND = "LISTUPDTEXCL"
 If Listpkg.Visible = False And If ListpkgINSTALLATI.Visible = False And If ListpkgAVAILABLE.Visible = False And If ListpkgUPGRADE.Visible = False 
      If txtpkg.text = "" Then
         Message.Info($SELECTPKG, "OK")
      Else
        If Btnexp2.Text = "EXP2" Then
          Btnexp2_Click 
        Endif
          spkg = txtpkg.Text
          txtpkg.Text = ""
           Btnclear_Click
           If $EXCLUDE = "" Then
              Print #$hProcess, "sudo su -c " & "'echo exclude=" & spkg & " >> /etc/dnf/dnf.conf' " & gb.NewLine;             
           Else 
               Print #$hProcess, "sudo sed -i 's/" & Left($EXCLUDE, String.Len($EXCLUDE) - 1) & "/" & Left($EXCLUDE, String.Len($EXCLUDE) - 1) & " " & Replace(spkg, " ", "") & "/g' /etc/dnf/dnf.conf" 
           Endif  
      Endif
 Else   
      If $OFFLINE = 0 Then
          If Listpkg.Visible = True 
              For Each a In Listpkg.Selection
                s = Listpkg[a].Text
                's = Scan(s, "* * *")[0]
                spkg = spkg & " " & s 
                 Listpkg.Remove(a)
              Next
                Listpkg.UnSelectAll
                If spkg = "" Then
                      Message.Info($SELECTPKG, "OK")
                    Else
                      If Btnexp2.Text = "EXP2" Then
                        Btnexp2_Click  
                      Endif
                      Btnclear_Click
                      TABHIDE
                      Listpkg.Visible = False
                      If $EXCLUDE = "" Then
                         Print #$hProcess, "sudo su -c " & "'echo exclude=" & spkg & " >> /etc/dnf/dnf.conf' " & gb.NewLine;             
                      Else 
                         Print #$hProcess, "sudo sed -i 's/" & Left($EXCLUDE, String.Len($EXCLUDE) - 1) & "/" & Left($EXCLUDE, String.Len($EXCLUDE) - 1) & " " & Right(spkg, String.Len(spkg) - 1) & "/g' /etc/dnf/dnf.conf" 
                      Endif  
                Endif
          Endif
  Else     
          If ListpkgINSTALLATI.Visible = True 
              For Each a In ListpkgINSTALLATI.Selection
                s = ListpkgINSTALLATI[a].Text
                s = Scan(s, "* * *")[0]
                spkg = spkg & " " & s 
                 ListpkgINSTALLATI.Remove(a)
              Next
                ListpkgINSTALLATI.UnSelectAll
                If spkg = "" Then
                      Message.Info($SELECTPKG, "OK")
                    Else
                      If Btnexp2.Text = "EXP2" Then
                        Btnexp2_Click  
                      Endif
                      Btnclear_Click
                      TABHIDE
                      Listpkg.Visible = False
                      If $EXCLUDE = "" Then
                         Print #$hProcess, "sudo su -c " & "'echo exclude=" & spkg & " >> /etc/dnf/dnf.conf' " & gb.NewLine;             
                      Else 
                         Print #$hProcess, "sudo sed -i 's/" & Left($EXCLUDE, String.Len($EXCLUDE) - 1) & "/" & Left($EXCLUDE, String.Len($EXCLUDE) - 1) & " " & Right(spkg, String.Len(spkg) - 1) & "/g' /etc/dnf/dnf.conf" 
                      Endif  
                Endif
          Endif
          
           If ListpkgAVAILABLE.Visible = True 
              For Each a In ListpkgAVAILABLE.Selection
                s = ListpkgAVAILABLE[a].Text
                s = Scan(s, "* * *")[0]
                spkg = spkg & " " & s 
                 ListpkgAVAILABLE.Remove(a)
              Next
                ListpkgAVAILABLE.UnSelectAll
                If spkg = "" Then
                      Message.Info($SELECTPKG, "OK")
                    Else
                      If Btnexp2.Text = "EXP2" Then
                        Btnexp2_Click  
                      Endif
                      Btnclear_Click
                      TABHIDE
                      Listpkg.Visible = False
                      If $EXCLUDE = "" Then
                          Print #$hProcess, "sudo su -c " & "'echo exclude=" & spkg & " >> /etc/dnf/dnf.conf' " & gb.NewLine;             
                      Else 
                          Print #$hProcess, "sudo sed -i 's/" & Left($EXCLUDE, String.Len($EXCLUDE) - 1) & "/" & Left($EXCLUDE, String.Len($EXCLUDE) - 1) & " " & Right(spkg, String.Len(spkg) - 1) & "/g' /etc/dnf/dnf.conf" 
                      Endif  
                Endif
          Endif
          
          If ListpkgUPGRADE.Visible = True 
              For Each a In ListpkgUPGRADE.Selection
                s = ListpkgUPGRADE[a].Text
                s = Scan(s, "* * *")[0]
                spkg = spkg & " " & s 
                 ListpkgUPGRADE.Remove(a)
              Next
                ListpkgUPGRADE.UnSelectAll
                If spkg = "" Then
                      Message.Info($SELECTPKG, "OK")
                    Else
                      If Btnexp2.Text = "EXP2" Then
                        Btnexp2_Click  
                      Endif
                      Btnclear_Click
                      TABHIDE
                      Listpkg.Visible = False
                      If $EXCLUDE = "" Then
                         Print #$hProcess, "sudo su -c " & "'echo exclude=" & spkg & " >> /etc/dnf/dnf.conf' " & gb.NewLine;             
                      Else 
                         Print #$hProcess, "sudo sed -i 's/" & Left($EXCLUDE, String.Len($EXCLUDE) - 1) & "/" & Left($EXCLUDE, String.Len($EXCLUDE) - 1) & " " & Right(spkg, String.Len(spkg) - 1) & "/g' /etc/dnf/dnf.conf" 
                      Endif  
                Endif
           Endif
  Endif
 Endif
 CMBVERSLOCK.index = 0
Endif

'RIMUOVE PACCHETTI DAGLI ESCLUSI************************************************
If CMBVERSLOCK.index = 2 Then                      'Delete
 If Listpkg.Visible = False And If ListpkgINSTALLATI.Visible = False And If ListpkgAVAILABLE.Visible = False And If ListpkgUPGRADE.Visible = False
      If txtpkg.text = "" Then
         FEXCLUDELIST.Show
      Else
        If Btnexp2.Text = "EXP2" Then
          Btnexp2_Click 
        Endif
          spkg = txtpkg.Text
          txtpkg.Text = ""
           Btnclear_Click
           Print #$hProcess, "sudo " & "sed -i 's/ " & spkg & "//g' " & " /etc/dnf/dnf.conf " & gb.NewLine; 
           $MEMOCOMMAND = "LISTUPDTEXCL"
      Endif
  Else
    FEXCLUDELIST.Show
  Endif
  CMBVERSLOCK.index = 0
Endif

'RIMUOVE TUTTI I PACCHETTI ESCLUSI************************************************
 If CMBVERSLOCK.index = 3 Then                      'CLEAR
          $MEMOCOMMAND = "LISTUPDTEXCL"
          Btnclear_Click
          If Btnexp2.Text = "EXP2" Then
          Btnexp2_Click 
          Endif
          Print #$hProcess, "sudo sed -i '/exclude/d' /etc/dnf/dnf.conf " & gb.NewLine;
  Endif
  CMBVERSLOCK.index = 0
End
Public Sub TXTPKGLISTLABEL_KeyPress()
End

Public Sub BTNMYREPO_Click()
  FMYREPO.Show
End

Public Sub BTNAUTOREMOVE_Click()
   Btnclear_Click
   If Btnexp2.Text = "EXP2" Then
      Btnexp2_Click  
   Endif
   Me.Mouse = Mouse.Wait 
   If $LOG = "NOLOG"
       Print #$hProcess, "sudo dnf autoremove" & $VERBOSE & gb.NewLine;
       PICLOGODISTRO.Visible = False  
       FRUNSHOW
   Endif 
   If $LOG = "LOG" Then
      DATATIME
      Print #$hProcess, "sudo dnf autoremove | tee " & User.Home & "/.config/dnfdrake/log/" & $DATATIME & "-dnfdrakelog-autoremove.log " & User.Home & "/.config/dnfdrake/log/last.log" & gb.NewLine;
       PICLOGODISTRO.Visible = False  
      FRUNSHOW
   Endif

End

Public Sub BTNFULLSCREEN_Click()
  RESOLUTION
  If Btnexp1.Text = "EXP1" And If Btnexp2.Text = "UEXP2" Then
    txtConsole.Width = 1330 + ($RISOLUZIONEX - 1366)
    txtConsole.Height = 476 + ($RISOLUZIONEY - 768)
  Endif
  
  If Btnexp1.Text = "UEXP1" And If Btnexp2.Text = "EXP2" Then
    txtConsole.Width = 1330 + ($RISOLUZIONEX - 1366) - Listpkg.Width - 5
    txtConsole.Height = 476 + ($RISOLUZIONEY - 768)
    txtConsole.X = listpkg.Width + listpkg.X
    
  Endif
  
 End
Public Sub BTNRESIZE_Click()
  RESOLUTION
  If Btnexp1.Text = "EXP1" And If Btnexp2.Text = "UEXP2" Then
    txtConsole.Width = 1330
    txtConsole.Height = 476
  Endif
  
  If Btnexp1.Text = "UEXP1" And If Btnexp2.Text = "EXP2" Then
    txtConsole.Width = 1029
    txtConsole.Height = 476
    txtConsole.X = 308
  Endif
End

' 
' Public Sub CHKSUSPEND_Click()
' 
' #$hProcess, "sudo systemctl mask sleep.target suspend.target hibernate.target hybrid-sleep.target"
'   
' 
' End
Public Sub TXTINFOBOX_KeyPress()
End

Public Sub BTNSUSPEND_Click()

 If BTNSUSPEND.Enabled = True 
      Btnclear_Click  
      ' If BTNSUSPEND.Text = "    Suspend On" Then
      If PICSUSPEND.Visible = True
         Print #$hProcess, "sudo systemctl mask sleep.target suspend.target hibernate.target hybrid-sleep.target" & gb.NewLine; 
          PICLOGODISTRO.Visible = False   
      Else 
         Print #$hProcess, "sudo systemctl unmask sleep.target suspend.target hibernate.target hybrid-sleep.target" & gb.NewLine;
          PICLOGODISTRO.Visible = False  
      Endif
      $MEMOCOMMAND = "CLEARSUSPEND"
  Endif     
End

Public Sub PICSUSPEND_MouseDown()
    BTNSUSPEND_Click
End

Public Sub PICSUSPENDLOCK_MouseDown()
    BTNSUSPEND_Click
End



Public Sub PICEXCLUDE_MouseDown()
  BTNEXCLUDE_Click
End


Public Sub CHKNODEPS_Click()
If ListpkgINSTALLATI.Visible = True Then
  BTNTABINSTALLED_Click
Endif
If ListpkgAVAILABLE.Visible = True Then
  BTNTABAVIABLE_Click
Endif
If ListpkgUPGRADE.Visible = True Then
  BTNTABUPDATE_Click
Endif

If Listpkg.Mode <> 0 Then
   If CHKNODEPS.Value = True Then
      Listpkg.Mode = 1
   Else    
      Listpkg.Mode = 2
   Endif
Endif

 If CHKNODEPS.Value = True Then
       Cmbtipo.Add(Cmbtipo[1].Text & " (NoDeps)", 5)
    Else    
       Cmbtipo.Remove(5)
       If ListpkgNODEPS.Visible = True
          Btnclear_Click
       Endif   
       Cmbtipo.Index = 0
    Endif

If PICLOGODISTRO.Visible = True And If CHKNODEPS.Value = True Then
  Cmbtipo.Index = 5
Endif


End
Public Sub CHKNODEPS_Menu()
  
  Message.Info($NODEPSINFO, "Ok")
  
End

Public Sub PICLOGODISTRO_MouseDown()
End

Public Sub BTNOKSELECTION_Click()
 BTNOKSELECTION.Enabled = False
 Print #$hProcess, TXTSELECTION.Text & gb.NewLine;
 Wait 0.2
 SELECTIONVIEW
End

Public Sub BTNANNULLASELECTION_Click()
  BTNANNULLASELECTION.Enabled = False
  Fmain.Mouse = Mouse.Default
  btnCtrlC_click
  Sleep 0.1
  btnCtrlC_click 
  SELECTIONVIEW

End

Public Sub TXTSELECTION_KeyPress()

End

Public Sub TXTSELECTION_Activate()
  
  Dim s As String
  s = TXTSELECTION.Text & gb.NewLine
  TXTSELECTION.Clear
  s = Conv$(s, Desktop.Charset, System.Charset)
  Print #Fmain.$hProcess, s;
  
  SELECTIONVIEW
  
End 

Public Sub LBLSELECTION_MouseDown()
End

Public Sub BORDOCONNECT_MouseDown()
End
